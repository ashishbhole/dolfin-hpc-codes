// This code conforms with the UFC specification version 2.4.0
// and was automatically generated by FFC version 1.2.0.
//
// This code was generated with the option '-l dolfin_hpc' and
// contains DOLFIN-HPC-specific wrappers that depend on DOLFIN-HPC.
//
// This code was generated with the following parameters:
//

//  add_tabulate_tensor_timing:     False
//  convert_exceptions_to_warnings: False
//  cpp_optimize:                   True
//  cpp_optimize_flags:             '-O2'
//  epsilon:                        1e-14
//  error_control:                  False
//  external_include_dirs:          ''
//  external_includes:              ''
//  external_libraries:             ''
//  external_library_dirs:          ''
//  form_postfix:                   True
//  format:                         'dolfin_hpc'
//  generate_dummy_tabulate_tensor: False
//  max_signature_length:           0
//  optimize:                       True
//  precision:                      None
//  quadrature_degree:              None
//  quadrature_rule:                None
//  representation:                 'auto'
//  split:                          False

#ifndef __NAVIERSTOKES3D_H
#define __NAVIERSTOKES3D_H
#include <algorithm>
#include <cmath>
#include <iostream>
#include <stdexcept>
#include <ufc.h>

class navierstokes3d_finite_element_0: public ufc::finite_element
{
public:

  navierstokes3d_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes3d_finite_element_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Lagrange', tetrahedron, 1)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 4;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 4; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[4 * ip + 3] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 4 * num_derivatives, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505542, 0.0, 0.0, 0.0 },
            { 5.163977794943223, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[4] = {};
    const std::size_t num_components[4] = { 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 4; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[4 * num_derivatives * ip + num_derivatives * i + r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 4 * num_derivatives, 0.0);
    const std::size_t reference_offsets[4] = {};
    const std::size_t physical_offsets[4] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 4; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[4 * num_derivatives * ip + num_derivatives * d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[4 * num_derivatives * ip + num_derivatives * d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[4];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[4];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold value of a single dof.
    double dof_values = 0.0;
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis(r, &dof_values, x, coordinate_dofs, cell_orientation);
        values[r] = dof_values;
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, num_derivatives * 4, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 4; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < num_derivatives; ++s)
            values[num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
    vertex_values[3] = dof_values[3];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[12] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 12, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes3d_finite_element_0();
  }

};


class navierstokes3d_finite_element_1: public ufc::finite_element
{
public:

  navierstokes3d_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes3d_finite_element_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 12;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 1;
  }

  const char * family() const final override
  {
    return "Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    for (std::size_t k = 0; k < num_points * 12 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Accumulate products of coefficients and basisvalues
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 3] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 4 + 1] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 5 + 1] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 6 + 1] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 7 + 1] += coefficients3[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 8 + 2] += coefficients0[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 9 + 2] += coefficients1[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 10 + 2] += coefficients2[0][r] * basisvalues1[r];
        for (std::size_t r = 0; r < 4; ++r)
            reference_values[12 * 3 * ip + 3 * 11 + 2] += coefficients3[0][r] * basisvalues1[r];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 12 * num_derivatives * 3, 0.0);
    if (order > 1)
        return;
    // Tables of derivatives of the polynomial base (transpose).
    alignas(32) static const double dmats0[3][4][4] =
        { { { 0.0, 0.0, 0.0, 0.0 },
            { 6.324555320336758, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 5.477225575051663, 0.0, 0.0, 0.0 },
            { 0.0, 0.0, 0.0, 0.0 } },
          { { 0.0, 0.0, 0.0, 0.0 },
            { 3.162277660168379, 0.0, 0.0, 0.0 },
            { 1.8257418583505542, 0.0, 0.0, 0.0 },
            { 5.163977794943223, 0.0, 0.0, 0.0 } } };
    static const double coefficients0[1][4] = { { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 } };
    static const double coefficients1[1][4] = { { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 } };
    static const double coefficients2[1][4] = { { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 } };
    static const double coefficients3[1][4] = { { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 } };
    const std::size_t reference_offset[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t num_components[12] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Map from UFC reference coordinate X to FIAT reference coordinate Y
        const double Y[3] = { 2.0 * X[ip * 3] - 1.0, 2.0 * X[ip * 3 + 1] - 1.0, 2.0 * X[ip * 3 + 2] - 1.0 };
        // Compute basisvalues for each relevant embedded degree
        double basisvalues1[4] = {};
        basisvalues1[0] = 1.0;
        const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
        basisvalues1[1] = tmp1_1;
        basisvalues1[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues1[0];
        basisvalues1[3] = (2.0 * Y[2] + 1.0) * basisvalues1[0];
        basisvalues1[0] *= std::sqrt(0.75);
        basisvalues1[3] *= std::sqrt(1.25);
        basisvalues1[2] *= std::sqrt(2.5);
        basisvalues1[1] *= std::sqrt(7.5);
        // Loop over all dofs
        for (std::size_t i = 0; i < 12; ++i)
        {
            double derivatives[3] = {};
            switch (i)
            {
            case 0:
                // Compute reference derivatives for dof 0.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 1:
                // Compute reference derivatives for dof 1.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 2:
                // Compute reference derivatives for dof 2.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 3:
                // Compute reference derivatives for dof 3.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 4:
                // Compute reference derivatives for dof 4.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 5:
                // Compute reference derivatives for dof 5.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 6:
                // Compute reference derivatives for dof 6.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 7:
                // Compute reference derivatives for dof 7.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            case 8:
                // Compute reference derivatives for dof 8.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients0[0][s] * aux[s];
                }
                break;
            case 9:
                // Compute reference derivatives for dof 9.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients1[0][s] * aux[s];
                }
                break;
            case 10:
                // Compute reference derivatives for dof 10.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients2[0][s] * aux[s];
                }
                break;
            case 11:
                // Compute reference derivatives for dof 11.
                for (std::size_t r = 0; r < num_derivatives; ++r)
                {
                    double aux[4] = {};
                    // Declare derivative matrix (of polynomial basis).
                    double dmats[4][4] = {};
                    // Initialize dmats.
                    std::size_t comb = combinations[order - 1][r][0];
                    std::copy_n(&dmats0[comb][0][0], 16, &dmats[0][0]);
                    // Looping derivative order to generate dmats.
                    for (std::size_t s = 1; s < order; ++s)
                    {
                        // Store previous dmats matrix.
                        double dmats_old[4][4];
                        std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                        // Resetting dmats.
                        std::fill_n(&dmats[0][0], 16, 0.0);
                        // Update dmats using an inner product.
                        comb = combinations[order - 1][r][s];
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats0[comb][t][tu] * dmats_old[tu][u];
                    }
                    for (std::size_t s = 0; s < 4; ++s)
                        for (std::size_t t = 0; t < 4; ++t)
                            aux[s] += dmats[s][t] * basisvalues1[t];
                    derivatives[r] = 0.0;
                    for (std::size_t s = 0; s < 4; ++s)
                        derivatives[r] += coefficients3[0][s] * aux[s];
                }
                break;
            }
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t c = 0; c < num_components[i]; ++c)
                    reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * i + 3 * r + (reference_offset[i] + c)] = derivatives[num_derivatives * c + r];
        }
    }
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    const std::size_t num_derivatives = std::pow(3, order);
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    std::fill_n(values, num_points * 12 * num_derivatives * 3, 0.0);
    const std::size_t reference_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    const std::size_t physical_offsets[12] = { 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[3][3];
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                transform[r][s] = 1.0;
        for (std::size_t r = 0; r < num_derivatives; ++r)
            for (std::size_t s = 0; s < num_derivatives; ++s)
                for (std::size_t k = 0; k < order; ++k)
                    transform[r][s] *= K[3 * 3 * ip + 3 * combinations[order - 1][s][k] + combinations[order - 1][r][k]];
        for (std::size_t d = 0; d < 12; ++d)
        {
            for (std::size_t s = 0; s < num_derivatives; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < num_derivatives; ++r)
                        values[12 * (num_derivatives * 3) * ip + num_derivatives * 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
        // Compute constants
        const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
        const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
        const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
        // Compute subdeterminants
        const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
        // Get coordinates and map to the reference (FIAT) element
        double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
        // Map to FFC reference coordinate
        for (std::size_t k = 0; k < 3; ++k)
            X[k] = (Y[k] + 1.0) / 2.0;
    }
    // Evaluate basis on reference element
    double ref_values[36];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[36];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Compute Jacobian
    double J[9];
    compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
    // Compute Inverse Jacobian and determinant
    double K[9];
    double detJ;
    compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    // Compute constants
    const double C0 = coordinate_dofs[9] + coordinate_dofs[6] + coordinate_dofs[3] - coordinate_dofs[0];
    const double C1 = coordinate_dofs[10] + coordinate_dofs[7] + coordinate_dofs[4] - coordinate_dofs[1];
    const double C2 = coordinate_dofs[11] + coordinate_dofs[8] + coordinate_dofs[5] - coordinate_dofs[2];
    // Compute subdeterminants
    const double d[9] = { J[4] * J[8] - J[5] * J[7], J[5] * J[6] - J[3] * J[8], J[3] * J[7] - J[4] * J[6], J[2] * J[7] - J[1] * J[8], J[0] * J[8] - J[2] * J[6], J[1] * J[6] - J[0] * J[7], J[1] * J[5] - J[2] * J[4], J[2] * J[3] - J[0] * J[5], J[0] * J[4] - J[1] * J[3] };
    // Get coordinates and map to the reference (FIAT) element
    double Y[3] = { (d[0] * (2.0 * x[0] - C0) + d[3] * (2.0 * x[1] - C1) + d[6] * (2.0 * x[2] - C2)) / detJ, (d[1] * (2.0 * x[0] - C0) + d[4] * (2.0 * x[1] - C1) + d[7] * (2.0 * x[2] - C2)) / detJ, (d[2] * (2.0 * x[0] - C0) + d[5] * (2.0 * x[1] - C1) + d[8] * (2.0 * x[2] - C2)) / detJ };
    // Precomputed combinations
    const std::size_t combinations[1][3][1] =
        { { { 0 },
            { 1 },
            { 2 } } };
    // Declare transformation matrix
    double transform[3][3] =
        { { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 },
          { 1.0, 1.0, 1.0 } };
    // Construct transformation matrix
    for (std::size_t row = 0; row < num_derivatives; ++row)
        for (std::size_t col = 0; col < num_derivatives; ++col)
            for (std::size_t k = 0; k < n; ++k)
                transform[row][col] *= K[3 * combinations[n - 1][col][k] + combinations[n - 1][row][k]];
    switch (i)
    {
    case 0:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 1:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 2:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 3:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[r] += transform[r][s] * derivatives[s];
        }
        break;
    case 4:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 5:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 6:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 7:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 8:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.288675134594813, -0.18257418583505536, -0.10540925533894598, -0.07453559924999298 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 9:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.28867513459481287, 0.18257418583505536, -0.10540925533894596, -0.07453559924999296 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 10:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.21081851067789195, -0.07453559924999299 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    case 11:
        {
            double basisvalues[4] = {};
            basisvalues[0] = 1.0;
            const double tmp1_1 = 0.5 * (2.0 + 2.0 * Y[0] + Y[1] + Y[2]);
            basisvalues[1] = tmp1_1;
            basisvalues[2] = 0.5 * (2.0 + 3.0 * Y[1] + Y[2]) * basisvalues[0];
            basisvalues[3] = (2.0 * Y[2] + 1.0) * basisvalues[0];
            basisvalues[0] *= std::sqrt(0.75);
            basisvalues[3] *= std::sqrt(1.25);
            basisvalues[2] *= std::sqrt(2.5);
            basisvalues[1] *= std::sqrt(7.5);
            // Table(s) of coefficients
            static const double coefficients0[4] = { 0.2886751345948129, 0.0, 0.0, 0.22360679774997896 };
            // Tables of derivatives of the polynomial base (transpose).
            static const double dmats0[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 6.324555320336758, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats1[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 5.477225575051663, 0.0, 0.0, 0.0 },
                  { 0.0, 0.0, 0.0, 0.0 } };
            static const double dmats2[4][4] =
                { { 0.0, 0.0, 0.0, 0.0 },
                  { 3.162277660168379, 0.0, 0.0, 0.0 },
                  { 1.8257418583505542, 0.0, 0.0, 0.0 },
                  { 5.163977794943223, 0.0, 0.0, 0.0 } };
            // Compute reference derivatives.
            // Declare array of derivatives on FIAT element.
            double derivatives[3] = {};
            // Declare derivative matrix (of polynomial basis).
            double dmats[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Declare (auxiliary) derivative matrix (of polynomial basis).
            double dmats_old[4][4] =
                { { 1.0, 0.0, 0.0, 0.0 },
                  { 0.0, 1.0, 0.0, 0.0 },
                  { 0.0, 0.0, 1.0, 0.0 },
                  { 0.0, 0.0, 0.0, 1.0 } };
            // Loop possible derivatives.
            for (std::size_t r = 0; r < num_derivatives; ++r)
            {
                // Reset dmats to identity
                std::fill_n(&dmats[0][0], 16, 0.0);
                for (std::size_t t = 0; t < 4; ++t)
                    dmats[t][t] = 1.0;
                // Looping derivative order to generate dmats.
                for (std::size_t s = 0; s < n; ++s)
                {
                    std::copy_n(&dmats[0][0], 16, &dmats_old[0][0]);
                    std::fill_n(&dmats[0][0], 16, 0.0);
                    // Update dmats using an inner product.
                    // _dmats_product(shape_dmats, comb[r][s], 0)
                    if (combinations[n - 1][r][s] == 0)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats0[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 1)
                    if (combinations[n - 1][r][s] == 1)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats1[t][tu];
                    }
                    // _dmats_product(shape_dmats, comb[r][s], 2)
                    if (combinations[n - 1][r][s] == 2)
                    {
                        for (std::size_t t = 0; t < 4; ++t)
                            for (std::size_t u = 0; u < 4; ++u)
                                for (std::size_t tu = 0; tu < 4; ++tu)
                                    dmats[t][u] += dmats_old[tu][u] * dmats2[t][tu];
                    }
                }
                for (std::size_t s = 0; s < 4; ++s)
                    for (std::size_t t = 0; t < 4; ++t)
                        derivatives[r] += coefficients0[s] * dmats[s][t] * basisvalues[t];
            }
            // Transform derivatives back to physical element
            for (std::size_t r = 0; r < num_derivatives; ++r)
                for (std::size_t s = 0; s < num_derivatives; ++s)
                    values[2 * num_derivatives + r] += transform[r][s] * derivatives[s];
        }
        break;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 12, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[9] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 12; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 2:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 3:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 4:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 5:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 6:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 7:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 8:
        {
            y[0] = coordinate_dofs[0];
            y[1] = coordinate_dofs[1];
            y[2] = coordinate_dofs[2];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 9:
        {
            y[0] = coordinate_dofs[3];
            y[1] = coordinate_dofs[4];
            y[2] = coordinate_dofs[5];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 10:
        {
            y[0] = coordinate_dofs[6];
            y[1] = coordinate_dofs[7];
            y[2] = coordinate_dofs[8];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    case 11:
        {
            y[0] = coordinate_dofs[9];
            y[1] = coordinate_dofs[10];
            y[2] = coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[4] = vals[1];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[5] = vals[1];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[6] = vals[1];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[7] = vals[1];
    y[0] = coordinate_dofs[0];
    y[1] = coordinate_dofs[1];
    y[2] = coordinate_dofs[2];
    f.evaluate(vals, y, c);
    values[8] = vals[2];
    y[0] = coordinate_dofs[3];
    y[1] = coordinate_dofs[4];
    y[2] = coordinate_dofs[5];
    f.evaluate(vals, y, c);
    values[9] = vals[2];
    y[0] = coordinate_dofs[6];
    y[1] = coordinate_dofs[7];
    y[2] = coordinate_dofs[8];
    f.evaluate(vals, y, c);
    values[10] = vals[2];
    y[0] = coordinate_dofs[9];
    y[1] = coordinate_dofs[10];
    y[2] = coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[11] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[1];
    vertex_values[6] = dof_values[2];
    vertex_values[9] = dof_values[3];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[4];
    vertex_values[4] = dof_values[5];
    vertex_values[7] = dof_values[6];
    vertex_values[10] = dof_values[7];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[8];
    vertex_values[5] = dof_values[9];
    vertex_values[8] = dof_values[10];
    vertex_values[11] = dof_values[11];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = coordinate_dofs[0];
    dof_coordinates[1] = coordinate_dofs[1];
    dof_coordinates[2] = coordinate_dofs[2];
    dof_coordinates[3] = coordinate_dofs[3];
    dof_coordinates[3 + 1] = coordinate_dofs[4];
    dof_coordinates[3 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 2] = coordinate_dofs[6];
    dof_coordinates[3 * 2 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 2 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 3] = coordinate_dofs[9];
    dof_coordinates[3 * 3 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 3 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 4] = coordinate_dofs[0];
    dof_coordinates[3 * 4 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 4 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 5] = coordinate_dofs[3];
    dof_coordinates[3 * 5 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 5 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 6] = coordinate_dofs[6];
    dof_coordinates[3 * 6 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 6 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 7] = coordinate_dofs[9];
    dof_coordinates[3 * 7 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 7 + 2] = coordinate_dofs[11];
    dof_coordinates[3 * 8] = coordinate_dofs[0];
    dof_coordinates[3 * 8 + 1] = coordinate_dofs[1];
    dof_coordinates[3 * 8 + 2] = coordinate_dofs[2];
    dof_coordinates[3 * 9] = coordinate_dofs[3];
    dof_coordinates[3 * 9 + 1] = coordinate_dofs[4];
    dof_coordinates[3 * 9 + 2] = coordinate_dofs[5];
    dof_coordinates[3 * 10] = coordinate_dofs[6];
    dof_coordinates[3 * 10 + 1] = coordinate_dofs[7];
    dof_coordinates[3 * 10 + 2] = coordinate_dofs[8];
    dof_coordinates[3 * 11] = coordinate_dofs[9];
    dof_coordinates[3 * 11 + 1] = coordinate_dofs[10];
    dof_coordinates[3 * 11 + 2] = coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[36] = { 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0 };
    std::copy_n(dof_X, 36, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_finite_element_0();
    case 1:
        return new navierstokes3d_finite_element_0();
    case 2:
        return new navierstokes3d_finite_element_0();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes3d_finite_element_1();
  }

};


class navierstokes3d_finite_element_2: public ufc::finite_element
{
public:

  navierstokes3d_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes3d_finite_element_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 1;
  }

  std::size_t value_rank() const final override
  {
    return 0;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t value_size() const final override
  {
    return 1;
  }

  std::size_t reference_value_rank() const final override
  {
    return 0;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    return 1;
  }

  std::size_t reference_value_size() const final override
  {
    return 1;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[ip] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * num_derivatives, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points, 0.0);
    const std::size_t reference_offsets[1] = {};
    const std::size_t physical_offsets[1] = {};
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 1; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[ip + d + s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[ip + d + r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[1];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[1];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 1; ++k)
        values[k] = physical_values[i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, coordinate_dofs, cell_orientation);
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, coordinate_dofs, cell_orientation);
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[1];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
    vertex_values[3] = dof_values[0];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[3] = { 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 3, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 0;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes3d_finite_element_2();
  }

};


class navierstokes3d_finite_element_3: public ufc::finite_element
{
public:

  navierstokes3d_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  ~navierstokes3d_finite_element_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "VectorElement(FiniteElement('Discontinuous Lagrange', tetrahedron, 0), dim=3)";
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t space_dimension() const final override
  {
    return 3;
  }

  std::size_t value_rank() const final override
  {
    return 1;
  }

  std::size_t value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t value_size() const final override
  {
    return 3;
  }

  std::size_t reference_value_rank() const final override
  {
    return 1;
  }

  std::size_t reference_value_dimension(std::size_t i) const final override
  {
    static const int return_values[1] = { 3 };
    if (i >= 1)
        return 1;
    return return_values[i];
  }

  std::size_t reference_value_size() const final override
  {
    return 3;
  }

  std::size_t degree() const final override
  {
    return 0;
  }

  const char * family() const final override
  {
    return "Discontinuous Lagrange";
  }

  void evaluate_reference_basis(double * reference_values,
                                std::size_t num_points,
                                const double * X) const final override
  {
    static const double coefficients0[1][1] = { { 1.0 } };
    for (std::size_t k = 0; k < num_points * 3 * 3; ++k)
        reference_values[k] = 0.0;
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basisvalues for each relevant embedded degree
        double basisvalues0[1] = {};
        basisvalues0[0] = 1.0;
        // Accumulate products of coefficients and basisvalues
        reference_values[3 * 3 * ip] += coefficients0[0][0] * basisvalues0[0];
        reference_values[3 * 3 * ip + 3 + 1] += coefficients0[0][0] * basisvalues0[0];
        reference_values[3 * 3 * ip + 3 * 2 + 2] += coefficients0[0][0] * basisvalues0[0];
    }
  }

  void evaluate_reference_basis_derivatives(double * reference_values,
                                            std::size_t order,
                                            std::size_t num_points,
                                            const double * X) const final override
  {
    if (order == 0)
    {
        evaluate_reference_basis(reference_values, num_points, X);
        return;
    }
    const std::size_t num_derivatives = std::pow(3, order);
    std::fill_n(reference_values, num_points * 3 * num_derivatives * 3, 0.0);
    if (order > 0)
        return;
  }

  void transform_reference_basis_derivatives(double * values,
                                             std::size_t order,
                                             std::size_t num_points,
                                             const double * reference_values,
                                             const double * X,
                                             const double * J,
                                             const double * detJ,
                                             const double * K,
                                             int cell_orientation) const final override
  {
    std::fill_n(values, num_points * 3 * 3, 0.0);
    const std::size_t reference_offsets[3] = { 0, 1, 2 };
    const std::size_t physical_offsets[3] = { 0, 1, 2 };
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        double transform[1][1];
        for (std::size_t r = 0; r < 1; ++r)
            for (std::size_t s = 0; s < 1; ++s)
                transform[r][s] = 1.0;
        for (std::size_t d = 0; d < 3; ++d)
        {
            for (std::size_t s = 0; s < 1; ++s)
            {
                for (std::size_t i = 0; i < 1; ++i)
                {
                    // Using affine transform to map values back to the physical element.
                    const double mapped_value = reference_values[3 * 3 * ip + 3 * d + 3 * s + reference_offsets[d]];
                    // Mapping derivatives back to the physical element
                    for (std::size_t r = 0; r < 1; ++r)
                        values[3 * 3 * ip + 3 * d + 3 * r + (physical_offsets[d] + i)] += transform[r][s] * mapped_value;
                }
            }
        }
    }
  }

  void evaluate_basis(std::size_t i,
                      double * values,
                      const double * x,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    double X[3] = {};
    double J[9];
    double detJ;
    double K[9];
    if (cm)
    {
        cm->compute_reference_geometry(X, J, &detJ, K, 1, x, coordinate_dofs, cell_orientation);
    }
    else
    {
        compute_jacobian_tetrahedron_3d(J, coordinate_dofs);
        compute_jacobian_inverse_tetrahedron_3d(K, detJ, J);
    }
    // Evaluate basis on reference element
    double ref_values[9];
    evaluate_reference_basis(ref_values, 1, X);
    // Push forward
    double physical_values[9];
    transform_reference_basis_derivatives(physical_values, 0, 1, ref_values, X, J, &detJ, K, cell_orientation);
    for (std::size_t k = 0; k < 3; ++k)
        values[k] = physical_values[3 * i + k];
  }

  void evaluate_basis_all(double * values,
                          const double * x,
                          const double * coordinate_dofs,
                          int cell_orientation,
                          const ufc::coordinate_mapping * cm=nullptr
                          ) const final override
  {
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis(r, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3; ++s)
            values[r * 3 + s] = dof_values[s];
    }
  }

  void evaluate_basis_derivatives(std::size_t i,
                                  std::size_t n,
                                  double * values,
                                  const double * x,
                                  const double * coordinate_dofs,
                                  int cell_orientation,
                                  const ufc::coordinate_mapping * cm=nullptr
                                  ) const final override
  {
    std::size_t num_derivatives = std::pow(3, n);
    std::fill_n(values, 3 * num_derivatives, 0.0);
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis(i, values, x, coordinate_dofs, cell_orientation);
        return;
    }
  }

  void evaluate_basis_derivatives_all(std::size_t n,
                                      double * values,
                                      const double * x,
                                      const double * coordinate_dofs,
                                      int cell_orientation,
                                      const ufc::coordinate_mapping * cm=nullptr
                                      ) const final override
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
        evaluate_basis_all(values, x, coordinate_dofs, cell_orientation);
        return;
    }
    unsigned int num_derivatives = std::pow(3, n);
    // Set values equal to zero.
    std::fill_n(values, 3 * num_derivatives * 3, 0.0);
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 0)
        return;
    // Helper variable to hold values of a single dof.
    double dof_values[3] = {};
    // Loop dofs and call evaluate_basis_derivatives.
    for (std::size_t r = 0; r < 3; ++r)
    {
        evaluate_basis_derivatives(r, n, dof_values, x, coordinate_dofs, cell_orientation);
        for (std::size_t s = 0; s < 3 * num_derivatives; ++s)
            values[3 * num_derivatives * r + s] = dof_values[s];
    }
  }

  double evaluate_dof(std::size_t i,
                      const ufc::function& f,
                      const double * coordinate_dofs,
                      int cell_orientation,
                      const ufc::cell& c,
                      const ufc::coordinate_mapping * cm=nullptr
                      ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    switch (i)
    {
    case 0:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[0];
        }
        break;
    case 1:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[1];
        }
        break;
    case 2:
        {
            y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
            y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
            y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
            f.evaluate(vals, y, c);
            return vals[2];
        }
        break;
    }
    return 0.0;
  }

  void evaluate_dofs(double * values,
                             const ufc::function& f,
                             const double * coordinate_dofs,
                             int cell_orientation,
                             const ufc::cell& c,
                             const ufc::coordinate_mapping * cm=nullptr
                             ) const final override
  {
    // Declare variables for result of evaluation
    double vals[3];
    // Declare variable for physical coordinates
    double y[3];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[1] = vals[1];
    y[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    y[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    y[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    f.evaluate(vals, y, c);
    values[2] = vals[2];
  }

  void interpolate_vertex_values(double * vertex_values,
                                 const double * dof_values,
                                 const double * coordinate_dofs,
                                 int cell_orientation,
                                 const ufc::coordinate_mapping * cm=nullptr
                                 ) const final override
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[3] = dof_values[0];
    vertex_values[6] = dof_values[0];
    vertex_values[9] = dof_values[0];
    // Evaluate function and change variables
    vertex_values[1] = dof_values[1];
    vertex_values[4] = dof_values[1];
    vertex_values[7] = dof_values[1];
    vertex_values[10] = dof_values[1];
    // Evaluate function and change variables
    vertex_values[2] = dof_values[2];
    vertex_values[5] = dof_values[2];
    vertex_values[8] = dof_values[2];
    vertex_values[11] = dof_values[2];
  }

  void tabulate_dof_coordinates(double * dof_coordinates,
                                const double * coordinate_dofs,
                                const ufc::coordinate_mapping * cm=nullptr
                                ) const final override
  {
    dof_coordinates[0] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
    dof_coordinates[3 * 2] = 0.25 * coordinate_dofs[0] + 0.25 * coordinate_dofs[3] + 0.25 * coordinate_dofs[6] + 0.25 * coordinate_dofs[9];
    dof_coordinates[3 * 2 + 1] = 0.25 * coordinate_dofs[1] + 0.25 * coordinate_dofs[4] + 0.25 * coordinate_dofs[7] + 0.25 * coordinate_dofs[10];
    dof_coordinates[3 * 2 + 2] = 0.25 * coordinate_dofs[2] + 0.25 * coordinate_dofs[5] + 0.25 * coordinate_dofs[8] + 0.25 * coordinate_dofs[11];
  }

  void tabulate_reference_dof_coordinates(double * reference_dof_coordinates) const final override
  {
    static const double dof_X[9] = { 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25 };
    std::copy_n(dof_X, 9, reference_dof_coordinates);
  }

  std::size_t num_sub_elements() const final override
  {
    return 3;
  }

  ufc::finite_element * create_sub_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_finite_element_2();
    case 1:
        return new navierstokes3d_finite_element_2();
    case 2:
        return new navierstokes3d_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::finite_element * create() const final override
  {
    return new navierstokes3d_finite_element_3();
  }

};


class navierstokes3d_dofmap_0: public ufc::dofmap
{
public:

  navierstokes3d_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes3d_dofmap_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Lagrange', tetrahedron, 1)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 4;
  }

  std::size_t num_element_dofs() const final override
  {
    return 4;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 3;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 1, 2, 3, 4 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[0][0];
    dofs[1] = entity_indices[0][1];
    dofs[2] = entity_indices[0][2];
    dofs[3] = entity_indices[0][3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        case 1:
            dofs[0] = 1;
            break;
        case 2:
            dofs[0] = 2;
            break;
        case 3:
            dofs[0] = 3;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes3d_dofmap_0();
  }

};


class navierstokes3d_dofmap_1: public ufc::dofmap
{
public:

  navierstokes3d_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes3d_dofmap_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { true, false, false, false };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[0];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 12;
  }

  std::size_t num_element_dofs() const final override
  {
    return 12;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 9;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 0, 0, 0 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 3, 6, 9, 12 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[0][0];
    dofs[1] = offset + entity_indices[0][1];
    dofs[2] = offset + entity_indices[0][2];
    dofs[3] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[4] = offset + entity_indices[0][0];
    dofs[5] = offset + entity_indices[0][1];
    dofs[6] = offset + entity_indices[0][2];
    dofs[7] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
    dofs[8] = offset + entity_indices[0][0];
    dofs[9] = offset + entity_indices[0][1];
    dofs[10] = offset + entity_indices[0][2];
    dofs[11] = offset + entity_indices[0][3];
    offset += num_global_entities[0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    switch (facet)
    {
    case 0:
        dofs[0] = 1;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 5;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 9;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 1:
        dofs[0] = 0;
        dofs[1] = 2;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 6;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 10;
        dofs[8] = 11;
        break;
    case 2:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 3;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 7;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 11;
        break;
    case 3:
        dofs[0] = 0;
        dofs[1] = 1;
        dofs[2] = 2;
        dofs[3] = 4;
        dofs[4] = 5;
        dofs[5] = 6;
        dofs[6] = 8;
        dofs[7] = 9;
        dofs[8] = 10;
        break;
    }
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 4;
            dofs[2] = 8;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 5;
            dofs[2] = 9;
            break;
        case 2:
            dofs[0] = 2;
            dofs[1] = 6;
            dofs[2] = 10;
            break;
        case 3:
            dofs[0] = 3;
            dofs[1] = 7;
            dofs[2] = 11;
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            dofs[0] = 2;
            dofs[1] = 3;
            dofs[2] = 6;
            dofs[3] = 7;
            dofs[4] = 10;
            dofs[5] = 11;
            break;
        case 1:
            dofs[0] = 1;
            dofs[1] = 3;
            dofs[2] = 5;
            dofs[3] = 7;
            dofs[4] = 9;
            dofs[5] = 11;
            break;
        case 2:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 5;
            dofs[3] = 6;
            dofs[4] = 9;
            dofs[5] = 10;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 3;
            dofs[2] = 4;
            dofs[3] = 7;
            dofs[4] = 8;
            dofs[5] = 11;
            break;
        case 4:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 4;
            dofs[3] = 6;
            dofs[4] = 8;
            dofs[5] = 10;
            break;
        case 5:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 4;
            dofs[3] = 5;
            dofs[4] = 8;
            dofs[5] = 9;
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            dofs[0] = 1;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 5;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 9;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 1:
            dofs[0] = 0;
            dofs[1] = 2;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 6;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 10;
            dofs[8] = 11;
            break;
        case 2:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 3;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 7;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 11;
            break;
        case 3:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 4;
            dofs[4] = 5;
            dofs[5] = 6;
            dofs[6] = 8;
            dofs[7] = 9;
            dofs[8] = 10;
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            dofs[3] = 3;
            dofs[4] = 4;
            dofs[5] = 5;
            dofs[6] = 6;
            dofs[7] = 7;
            dofs[8] = 8;
            dofs[9] = 9;
            dofs[10] = 10;
            dofs[11] = 11;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_dofmap_0();
    case 1:
        return new navierstokes3d_dofmap_0();
    case 2:
        return new navierstokes3d_dofmap_0();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes3d_dofmap_1();
  }

};


class navierstokes3d_dofmap_2: public ufc::dofmap
{
public:

  navierstokes3d_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes3d_dofmap_2() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', tetrahedron, 0)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { false, false, false, true };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return num_global_entities[3];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 1;
  }

  std::size_t num_element_dofs() const final override
  {
    return 1;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 1 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    dofs[0] = entity_indices[3][0];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 0;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    return nullptr;
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes3d_dofmap_2();
  }

};


class navierstokes3d_dofmap_3: public ufc::dofmap
{
public:

  navierstokes3d_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  ~navierstokes3d_dofmap_3() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC dofmap for VectorElement(FiniteElement('Discontinuous Lagrange', tetrahedron, 0), dim=3)";
  }

  bool needs_mesh_entities(std::size_t d) const final override
  {
    static const bool return_values[4] = { false, false, false, true };
    if (d >= 4)
        return false;
    return return_values[d];
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  std::size_t global_dimension(const std::vector<std::size_t>&
                               num_global_entities) const final override
  {
    return 3 * num_global_entities[3];
  }

  std::size_t num_global_support_dofs() const final override
  {
    return 0;
  }

  std::size_t num_element_support_dofs() const final override
  {
    return 3;
  }

  std::size_t num_element_dofs() const final override
  {
    return 3;
  }

  std::size_t num_facet_dofs() const final override
  {
    return 0;
  }

  std::size_t num_entity_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 3 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  std::size_t num_entity_closure_dofs(std::size_t d) const final override
  {
    static const std::size_t return_values[4] = { 0, 0, 0, 3 };
    if (d >= 4)
        return 0;
    return return_values[d];
  }

  void tabulate_dofs(std::size_t * dofs,
                     const std::vector<std::size_t>& num_global_entities,
                     const std::vector<std::vector<std::size_t>>& entity_indices) const final override
  {
    std::size_t offset = 0;
    dofs[0] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[1] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
    dofs[2] = offset + entity_indices[3][0];
    offset += num_global_entities[3];
  }

  void tabulate_facet_dofs(std::size_t * dofs,
                           std::size_t facet) const final override
  {
    // Do nothing
  }

  void tabulate_entity_dofs(std::size_t * dofs,
                            std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }

  void tabulate_entity_closure_dofs(std::size_t * dofs,
                                    std::size_t d, std::size_t i) const final override
  {
    switch (d)
    {
    case 0:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 1:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        case 4:
            break;
        case 5:
            break;
        }
        break;
    case 2:
        switch (i)
        {
        case 0:
            break;
        case 1:
            break;
        case 2:
            break;
        case 3:
            break;
        }
        break;
    case 3:
        switch (i)
        {
        case 0:
            dofs[0] = 0;
            dofs[1] = 1;
            dofs[2] = 2;
            break;
        }
        break;
    }
  }


  std::size_t num_sub_dofmaps() const final override
  {
    return 3;
  }

  ufc::dofmap * create_sub_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_dofmap_2();
    case 1:
        return new navierstokes3d_dofmap_2();
    case 2:
        return new navierstokes3d_dofmap_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create() const final override
  {
    return new navierstokes3d_dofmap_3();
  }

};


class navierstokes3d_coordinate_mapping_1: public ufc::coordinate_mapping
{
public:

  navierstokes3d_coordinate_mapping_1() : ufc::coordinate_mapping()
  {
    // Do nothing
  }

  ~navierstokes3d_coordinate_mapping_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "FFC coordinate_mapping from VectorElement(FiniteElement('Lagrange', tetrahedron, 1), dim=3)";
  }

  ufc::coordinate_mapping * create() const final override
  {
    return new navierstokes3d_coordinate_mapping_1();
  }

  std::size_t geometric_dimension() const final override
  {
    return 3;
  }

  std::size_t topological_dimension() const final override
  {
    return 3;
  }

  ufc::shape cell_shape() const final override
  {
    return ufc::shape::tetrahedron;
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes3d_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes3d_dofmap_1();
  }

  void compute_physical_coordinates(
      double * x, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    navierstokes3d_finite_element_0 xelement;
    double phi[4];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis values of coordinate element
        xelement.evaluate_reference_basis(phi, 1, &X[3 * ip]);
        // Compute x
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t d = 0; d < 4; ++d)
                x[3 * ip + i] += coordinate_dofs[3 * d + i] * phi[d];
    }
  }

  void compute_reference_coordinates(
      double * X, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double J[9];
    double detJ[1];
    double K[9];
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_reference_geometry(
      double * X, double * J, double * detJ, double * K, std::size_t num_points,
      const double * x,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    const double phi_X0[4] = { 1.0, 0.0, 0.0, 0.0 };
    const double dphi_X0[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    double x0[3] = {};
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t k = 0; k < 4; ++k)
            x0[i] += coordinate_dofs[3 * k + i] * phi_X0[k];
    for (std::size_t i = 0; i < 3; ++i)
    {
        for (std::size_t j = 0; j < 3; ++j)
        {
            J[3 * i + j] = 0.0;
            for (std::size_t k = 0; k < 4; ++k)
                J[3 * i + j] += coordinate_dofs[3 * k + i] * dphi_X0[j][k];
        }
    }
    compute_jacobian_determinants(detJ, 1, J, cell_orientation);
    compute_jacobian_inverses(K, 1, J, detJ);
    for (std::size_t ip = 0; ip < num_points; ++ip)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t i = 0; i < 3; ++i)
                X[3 * ip + j] += K[3 * j + i] * (x[3 * ip + i] - x0[i]);
  }

  void compute_jacobians(
      double * J, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs) const final override
  {
    navierstokes3d_finite_element_0 xelement;
    double dphi[12];
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        // Compute basis derivatives of coordinate element
        xelement.evaluate_reference_basis_derivatives(dphi, 1, 1, &X[3 * ip]);
        // Compute J
        for (std::size_t i = 0; i < 3; ++i)
            for (std::size_t j = 0; j < 3; ++j)
                for (std::size_t d = 0; d < 4; ++d)
                    J[3 * 3 * ip + 3 * i + j] += coordinate_dofs[3 * d + i] * dphi[3 * d + j];
    }
  }

  void compute_jacobian_determinants(
      double * detJ, std::size_t num_points,
      const double * J,
      int cell_orientation) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
        detJ[ip] = J[3 * 3 * ip] * (J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2 + 2] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) + J[3 * 3 * ip + 1] * (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 2]) + J[3 * 3 * ip + 2] * (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 + 1] * J[3 * 3 * ip + 3 * 2]);
  }

  void compute_jacobian_inverses(
      double * K, std::size_t num_points,
      const double * J, const double * detJ) const final override
  {
    for (std::size_t ip = 0; ip < num_points; ++ip)
    {
        K[3 * 3 * ip] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 1] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2 + 2]) / detJ[ip];
        K[3 * 3 * ip + 2] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 + 2] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3] = (J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip + 3]) / detJ[ip];
        K[3 * 3 * ip + 3 + 1] = (J[3 * 3 * ip + 3 * 2 + 2] * J[3 * 3 * ip] - J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3 * 2]) / detJ[ip];
        K[3 * 3 * ip + 3 + 2] = (J[3 * 3 * ip + 2] * J[3 * 3 * ip + 3] - J[3 * 3 * ip + 3 + 2] * J[3 * 3 * ip]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2] = (J[3 * 3 * ip + 3] * J[3 * 3 * ip + 3 * 2 + 1] - J[3 * 3 * ip + 3 * 2] * J[3 * 3 * ip + 3 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 1] = (J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3 * 2] - J[3 * 3 * ip] * J[3 * 3 * ip + 3 * 2 + 1]) / detJ[ip];
        K[3 * 3 * ip + 3 * 2 + 2] = (J[3 * 3 * ip] * J[3 * 3 * ip + 3 + 1] - J[3 * 3 * ip + 1] * J[3 * 3 * ip + 3]) / detJ[ip];
    }
  }

  void compute_geometry(
      double * x, double * J, double * detJ, double * K, std::size_t num_points,
      const double * X,
      const double * coordinate_dofs, int cell_orientation) const final override
  {
    compute_physical_coordinates(x, num_points, X, coordinate_dofs);
    compute_jacobians(J, num_points, X, coordinate_dofs);
    compute_jacobian_determinants(detJ, num_points, J, cell_orientation);
    compute_jacobian_inverses(K, num_points, J, detJ);
  }

  void compute_midpoint_geometry(
      double * x, double * J,
      const double * coordinate_dofs) const final override
  {
    const double phi_Xm[4] = { 0.25000000000000006, 0.24999999999999997, 0.25, 0.25 };
    const double dphi_Xm[3][4] =
        { { -1.0, 1.0, 0.0, 0.0 },
          { -1.0, 0.0, 1.0, 0.0 },
          { -1.0, 0.0, 0.0, 1.0 } };
    // Compute x
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t d = 0; d < 4; ++d)
            x[i] += coordinate_dofs[3 * d + i] * phi_Xm[d];
    // Compute J
    for (std::size_t i = 0; i < 3; ++i)
        for (std::size_t j = 0; j < 3; ++j)
            for (std::size_t d = 0; d < 4; ++d)
                J[3 * i + j] += coordinate_dofs[3 * d + i] * dphi_Xm[j][d];
  }

};


class navierstokes3d_cell_integral_0_otherwise: public ufc::cell_integral
{
public:

  navierstokes3d_cell_integral_0_otherwise() : ufc::cell_integral()
  {

  }

  ~navierstokes3d_cell_integral_0_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE32_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    // Unstructured piecewise computations
    const double J_c4 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE32_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE32_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE32_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE32_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE32_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE32_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE32_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE32_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE32_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE32_C0_D001_Q4[0][0][1];
    alignas(32) double sp[503];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = J_c3 * (-1 * J_c8);
    sp[16] = sp[4] + sp[15];
    sp[17] = sp[16] / sp[13];
    sp[18] = sp[11] / sp[13];
    sp[19] = w[0][0] * (0.5 * sp[14]);
    sp[20] = w[0][0] * (0.5 * sp[17]);
    sp[21] = w[0][0] * (0.5 * sp[18]);
    sp[22] = J_c2 * J_c7;
    sp[23] = J_c8 * (-1 * J_c1);
    sp[24] = sp[22] + sp[23];
    sp[25] = sp[24] / sp[13];
    sp[26] = J_c0 * J_c8;
    sp[27] = J_c6 * (-1 * J_c2);
    sp[28] = sp[26] + sp[27];
    sp[29] = sp[28] / sp[13];
    sp[30] = J_c1 * J_c6;
    sp[31] = J_c0 * J_c7;
    sp[32] = sp[30] + -1 * sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = w[0][1] * (0.5 * sp[25]);
    sp[35] = w[0][1] * (0.5 * sp[29]);
    sp[36] = w[0][1] * (0.5 * sp[33]);
    sp[37] = sp[34] + sp[19];
    sp[38] = sp[35] + sp[20];
    sp[39] = sp[21] + sp[36];
    sp[40] = J_c1 * J_c5;
    sp[41] = J_c2 * J_c4;
    sp[42] = sp[40] + -1 * sp[41];
    sp[43] = sp[42] / sp[13];
    sp[44] = J_c2 * J_c3;
    sp[45] = J_c0 * J_c5;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = J_c0 * J_c4;
    sp[49] = J_c1 * J_c3;
    sp[50] = sp[48] + -1 * sp[49];
    sp[51] = sp[50] / sp[13];
    sp[52] = w[0][2] * (0.5 * sp[43]);
    sp[53] = w[0][2] * (0.5 * sp[47]);
    sp[54] = w[0][2] * (0.5 * sp[51]);
    sp[55] = sp[37] + sp[52];
    sp[56] = sp[38] + sp[53];
    sp[57] = sp[39] + sp[54];
    sp[58] = 0.5 * sp[14] * sp[14];
    sp[59] = 0.5 * sp[17] * sp[14];
    sp[60] = 0.5 * sp[18] * sp[14];
    sp[61] = 0.5 * sp[14] * sp[17];
    sp[62] = 0.5 * sp[17] * sp[17];
    sp[63] = 0.5 * sp[18] * sp[17];
    sp[64] = 0.5 * sp[14] * sp[18];
    sp[65] = 0.5 * sp[17] * sp[18];
    sp[66] = 0.5 * sp[18] * sp[18];
    sp[67] = 0.5 * sp[25] * sp[25];
    sp[68] = 0.5 * sp[29] * sp[25];
    sp[69] = 0.5 * sp[33] * sp[25];
    sp[70] = 0.5 * sp[25] * sp[29];
    sp[71] = 0.5 * sp[29] * sp[29];
    sp[72] = 0.5 * sp[33] * sp[29];
    sp[73] = 0.5 * sp[25] * sp[33];
    sp[74] = 0.5 * sp[29] * sp[33];
    sp[75] = 0.5 * sp[33] * sp[33];
    sp[76] = sp[67] + sp[58];
    sp[77] = sp[70] + sp[61];
    sp[78] = sp[64] + sp[73];
    sp[79] = sp[68] + sp[59];
    sp[80] = sp[71] + sp[62];
    sp[81] = sp[65] + sp[74];
    sp[82] = sp[69] + sp[60];
    sp[83] = sp[72] + sp[63];
    sp[84] = sp[66] + sp[75];
    sp[85] = 0.5 * sp[43] * sp[43];
    sp[86] = 0.5 * sp[47] * sp[43];
    sp[87] = 0.5 * sp[51] * sp[43];
    sp[88] = 0.5 * sp[43] * sp[47];
    sp[89] = 0.5 * sp[47] * sp[47];
    sp[90] = 0.5 * sp[51] * sp[47];
    sp[91] = 0.5 * sp[43] * sp[51];
    sp[92] = 0.5 * sp[47] * sp[51];
    sp[93] = 0.5 * sp[51] * sp[51];
    sp[94] = sp[76] + sp[85];
    sp[95] = sp[77] + sp[88];
    sp[96] = sp[78] + sp[91];
    sp[97] = sp[79] + sp[86];
    sp[98] = sp[80] + sp[89];
    sp[99] = sp[81] + sp[92];
    sp[100] = sp[82] + sp[87];
    sp[101] = sp[83] + sp[90];
    sp[102] = sp[84] + sp[93];
    sp[103] = sp[94] * (-1 * w[1][0]);
    sp[104] = sp[95] * (-1 * w[1][0]);
    sp[105] = sp[96] * (-1 * w[1][0]);
    sp[106] = sp[97] * (-1 * w[1][0]);
    sp[107] = sp[98] * (-1 * w[1][0]);
    sp[108] = sp[99] * (-1 * w[1][0]);
    sp[109] = sp[100] * (-1 * w[1][0]);
    sp[110] = sp[101] * (-1 * w[1][0]);
    sp[111] = sp[102] * (-1 * w[1][0]);
    sp[112] = 0.5 * sp[25] * sp[14];
    sp[113] = 0.5 * sp[29] * sp[14];
    sp[114] = 0.5 * sp[33] * sp[14];
    sp[115] = 0.5 * sp[43] * sp[14];
    sp[116] = 0.5 * sp[47] * sp[14];
    sp[117] = 0.5 * sp[51] * sp[14];
    sp[118] = 0.5 * sp[25] * sp[17];
    sp[119] = 0.5 * sp[29] * sp[17];
    sp[120] = 0.5 * sp[33] * sp[17];
    sp[121] = 0.5 * sp[43] * sp[17];
    sp[122] = 0.5 * sp[47] * sp[17];
    sp[123] = 0.5 * sp[51] * sp[17];
    sp[124] = 0.5 * sp[25] * sp[18];
    sp[125] = 0.5 * sp[29] * sp[18];
    sp[126] = 0.5 * sp[33] * sp[18];
    sp[127] = 0.5 * sp[43] * sp[18];
    sp[128] = 0.5 * sp[47] * sp[18];
    sp[129] = 0.5 * sp[51] * sp[18];
    sp[130] = 0.5 * sp[14] * sp[25];
    sp[131] = 0.5 * sp[17] * sp[25];
    sp[132] = 0.5 * sp[18] * sp[25];
    sp[133] = 0.5 * sp[43] * sp[25];
    sp[134] = 0.5 * sp[47] * sp[25];
    sp[135] = 0.5 * sp[51] * sp[25];
    sp[136] = 0.5 * sp[14] * sp[29];
    sp[137] = 0.5 * sp[17] * sp[29];
    sp[138] = 0.5 * sp[18] * sp[29];
    sp[139] = 0.5 * sp[43] * sp[29];
    sp[140] = 0.5 * sp[47] * sp[29];
    sp[141] = 0.5 * sp[51] * sp[29];
    sp[142] = 0.5 * sp[14] * sp[33];
    sp[143] = 0.5 * sp[17] * sp[33];
    sp[144] = 0.5 * sp[18] * sp[33];
    sp[145] = 0.5 * sp[43] * sp[33];
    sp[146] = 0.5 * sp[47] * sp[33];
    sp[147] = 0.5 * sp[51] * sp[33];
    sp[148] = 0.5 * sp[14] * sp[43];
    sp[149] = 0.5 * sp[17] * sp[43];
    sp[150] = 0.5 * sp[18] * sp[43];
    sp[151] = 0.5 * sp[25] * sp[43];
    sp[152] = 0.5 * sp[29] * sp[43];
    sp[153] = 0.5 * sp[33] * sp[43];
    sp[154] = 0.5 * sp[14] * sp[47];
    sp[155] = 0.5 * sp[17] * sp[47];
    sp[156] = 0.5 * sp[18] * sp[47];
    sp[157] = 0.5 * sp[25] * sp[47];
    sp[158] = 0.5 * sp[29] * sp[47];
    sp[159] = 0.5 * sp[33] * sp[47];
    sp[160] = 0.5 * sp[14] * sp[51];
    sp[161] = 0.5 * sp[17] * sp[51];
    sp[162] = 0.5 * sp[18] * sp[51];
    sp[163] = 0.5 * sp[25] * sp[51];
    sp[164] = 0.5 * sp[29] * sp[51];
    sp[165] = 0.5 * sp[33] * sp[51];
    sp[166] = sp[58] * (-1 * w[3][0]);
    sp[167] = sp[61] * (-1 * w[3][0]);
    sp[168] = sp[64] * (-1 * w[3][0]);
    sp[169] = sp[130] * (-1 * w[3][0]);
    sp[170] = sp[136] * (-1 * w[3][0]);
    sp[171] = sp[142] * (-1 * w[3][0]);
    sp[172] = sp[148] * (-1 * w[3][0]);
    sp[173] = sp[154] * (-1 * w[3][0]);
    sp[174] = sp[160] * (-1 * w[3][0]);
    sp[175] = sp[59] * (-1 * w[3][0]);
    sp[176] = sp[62] * (-1 * w[3][0]);
    sp[177] = sp[65] * (-1 * w[3][0]);
    sp[178] = sp[131] * (-1 * w[3][0]);
    sp[179] = sp[137] * (-1 * w[3][0]);
    sp[180] = sp[143] * (-1 * w[3][0]);
    sp[181] = sp[149] * (-1 * w[3][0]);
    sp[182] = sp[155] * (-1 * w[3][0]);
    sp[183] = sp[161] * (-1 * w[3][0]);
    sp[184] = sp[60] * (-1 * w[3][0]);
    sp[185] = sp[63] * (-1 * w[3][0]);
    sp[186] = sp[66] * (-1 * w[3][0]);
    sp[187] = sp[132] * (-1 * w[3][0]);
    sp[188] = sp[138] * (-1 * w[3][0]);
    sp[189] = sp[144] * (-1 * w[3][0]);
    sp[190] = sp[150] * (-1 * w[3][0]);
    sp[191] = sp[156] * (-1 * w[3][0]);
    sp[192] = sp[162] * (-1 * w[3][0]);
    sp[193] = sp[112] * (-1 * w[3][0]);
    sp[194] = sp[118] * (-1 * w[3][0]);
    sp[195] = sp[124] * (-1 * w[3][0]);
    sp[196] = sp[67] * (-1 * w[3][0]);
    sp[197] = sp[70] * (-1 * w[3][0]);
    sp[198] = sp[73] * (-1 * w[3][0]);
    sp[199] = sp[151] * (-1 * w[3][0]);
    sp[200] = sp[157] * (-1 * w[3][0]);
    sp[201] = sp[163] * (-1 * w[3][0]);
    sp[202] = sp[113] * (-1 * w[3][0]);
    sp[203] = sp[119] * (-1 * w[3][0]);
    sp[204] = sp[125] * (-1 * w[3][0]);
    sp[205] = sp[68] * (-1 * w[3][0]);
    sp[206] = sp[71] * (-1 * w[3][0]);
    sp[207] = sp[74] * (-1 * w[3][0]);
    sp[208] = sp[152] * (-1 * w[3][0]);
    sp[209] = sp[158] * (-1 * w[3][0]);
    sp[210] = sp[164] * (-1 * w[3][0]);
    sp[211] = sp[114] * (-1 * w[3][0]);
    sp[212] = sp[120] * (-1 * w[3][0]);
    sp[213] = sp[126] * (-1 * w[3][0]);
    sp[214] = sp[69] * (-1 * w[3][0]);
    sp[215] = sp[72] * (-1 * w[3][0]);
    sp[216] = sp[75] * (-1 * w[3][0]);
    sp[217] = sp[153] * (-1 * w[3][0]);
    sp[218] = sp[159] * (-1 * w[3][0]);
    sp[219] = sp[165] * (-1 * w[3][0]);
    sp[220] = sp[115] * (-1 * w[3][0]);
    sp[221] = sp[121] * (-1 * w[3][0]);
    sp[222] = sp[127] * (-1 * w[3][0]);
    sp[223] = sp[133] * (-1 * w[3][0]);
    sp[224] = sp[139] * (-1 * w[3][0]);
    sp[225] = sp[145] * (-1 * w[3][0]);
    sp[226] = sp[85] * (-1 * w[3][0]);
    sp[227] = sp[88] * (-1 * w[3][0]);
    sp[228] = sp[91] * (-1 * w[3][0]);
    sp[229] = sp[116] * (-1 * w[3][0]);
    sp[230] = sp[122] * (-1 * w[3][0]);
    sp[231] = sp[128] * (-1 * w[3][0]);
    sp[232] = sp[134] * (-1 * w[3][0]);
    sp[233] = sp[140] * (-1 * w[3][0]);
    sp[234] = sp[146] * (-1 * w[3][0]);
    sp[235] = sp[86] * (-1 * w[3][0]);
    sp[236] = sp[89] * (-1 * w[3][0]);
    sp[237] = sp[92] * (-1 * w[3][0]);
    sp[238] = sp[117] * (-1 * w[3][0]);
    sp[239] = sp[123] * (-1 * w[3][0]);
    sp[240] = sp[129] * (-1 * w[3][0]);
    sp[241] = sp[135] * (-1 * w[3][0]);
    sp[242] = sp[141] * (-1 * w[3][0]);
    sp[243] = sp[147] * (-1 * w[3][0]);
    sp[244] = sp[87] * (-1 * w[3][0]);
    sp[245] = sp[90] * (-1 * w[3][0]);
    sp[246] = sp[93] * (-1 * w[3][0]);
    sp[247] = sp[103] + sp[166];
    sp[248] = sp[104] + sp[167];
    sp[249] = sp[105] + sp[168];
    sp[250] = sp[106] + sp[175];
    sp[251] = sp[107] + sp[176];
    sp[252] = sp[108] + sp[177];
    sp[253] = sp[109] + sp[184];
    sp[254] = sp[110] + sp[185];
    sp[255] = sp[111] + sp[186];
    sp[256] = sp[103] + sp[196];
    sp[257] = sp[104] + sp[197];
    sp[258] = sp[105] + sp[198];
    sp[259] = sp[106] + sp[205];
    sp[260] = sp[107] + sp[206];
    sp[261] = sp[108] + sp[207];
    sp[262] = sp[109] + sp[214];
    sp[263] = sp[110] + sp[215];
    sp[264] = sp[111] + sp[216];
    sp[265] = sp[103] + sp[226];
    sp[266] = sp[104] + sp[227];
    sp[267] = sp[105] + sp[228];
    sp[268] = sp[106] + sp[235];
    sp[269] = sp[107] + sp[236];
    sp[270] = sp[108] + sp[237];
    sp[271] = sp[109] + sp[244];
    sp[272] = sp[110] + sp[245];
    sp[273] = sp[111] + sp[246];
    sp[274] = w[0][0] * sp[14];
    sp[275] = w[0][0] * sp[17];
    sp[276] = w[0][0] * sp[18];
    sp[277] = w[0][1] * sp[25];
    sp[278] = w[0][1] * sp[29];
    sp[279] = w[0][1] * sp[33];
    sp[280] = sp[277] + sp[274];
    sp[281] = sp[278] + sp[275];
    sp[282] = sp[276] + sp[279];
    sp[283] = w[0][2] * sp[43];
    sp[284] = w[0][2] * sp[47];
    sp[285] = w[0][2] * sp[51];
    sp[286] = sp[280] + sp[283];
    sp[287] = sp[281] + sp[284];
    sp[288] = sp[282] + sp[285];
    sp[289] = sp[55] * sp[286];
    sp[290] = sp[56] * sp[286];
    sp[291] = sp[57] * sp[286];
    sp[292] = sp[55] * sp[287];
    sp[293] = sp[56] * sp[287];
    sp[294] = sp[57] * sp[287];
    sp[295] = sp[55] * sp[288];
    sp[296] = sp[56] * sp[288];
    sp[297] = sp[57] * sp[288];
    sp[298] = sp[289] * (-1 * w[2][0]);
    sp[299] = sp[292] * (-1 * w[2][0]);
    sp[300] = sp[295] * (-1 * w[2][0]);
    sp[301] = sp[290] * (-1 * w[2][0]);
    sp[302] = sp[293] * (-1 * w[2][0]);
    sp[303] = sp[296] * (-1 * w[2][0]);
    sp[304] = sp[291] * (-1 * w[2][0]);
    sp[305] = sp[294] * (-1 * w[2][0]);
    sp[306] = sp[297] * (-1 * w[2][0]);
    sp[307] = sp[247] + sp[298];
    sp[308] = sp[248] + sp[299];
    sp[309] = sp[249] + sp[300];
    sp[310] = sp[250] + sp[301];
    sp[311] = sp[251] + sp[302];
    sp[312] = sp[252] + sp[303];
    sp[313] = sp[253] + sp[304];
    sp[314] = sp[254] + sp[305];
    sp[315] = sp[255] + sp[306];
    sp[316] = sp[256] + sp[298];
    sp[317] = sp[257] + sp[299];
    sp[318] = sp[258] + sp[300];
    sp[319] = sp[259] + sp[301];
    sp[320] = sp[260] + sp[302];
    sp[321] = sp[261] + sp[303];
    sp[322] = sp[262] + sp[304];
    sp[323] = sp[263] + sp[305];
    sp[324] = sp[264] + sp[306];
    sp[325] = sp[265] + sp[298];
    sp[326] = sp[266] + sp[299];
    sp[327] = sp[267] + sp[300];
    sp[328] = sp[268] + sp[301];
    sp[329] = sp[269] + sp[302];
    sp[330] = sp[270] + sp[303];
    sp[331] = sp[271] + sp[304];
    sp[332] = sp[272] + sp[305];
    sp[333] = sp[273] + sp[306];
    sp[334] = -1 * sp[55] * w[4][0];
    sp[335] = -1 * sp[56] * w[4][0];
    sp[336] = -1 * sp[57] * w[4][0];
    sp[337] = sp[307] * w[4][0];
    sp[338] = sp[308] * w[4][0];
    sp[339] = sp[309] * w[4][0];
    sp[340] = sp[169] * w[4][0];
    sp[341] = sp[170] * w[4][0];
    sp[342] = sp[171] * w[4][0];
    sp[343] = sp[172] * w[4][0];
    sp[344] = sp[173] * w[4][0];
    sp[345] = sp[174] * w[4][0];
    sp[346] = sp[310] * w[4][0];
    sp[347] = sp[311] * w[4][0];
    sp[348] = sp[312] * w[4][0];
    sp[349] = sp[178] * w[4][0];
    sp[350] = sp[179] * w[4][0];
    sp[351] = sp[180] * w[4][0];
    sp[352] = sp[181] * w[4][0];
    sp[353] = sp[182] * w[4][0];
    sp[354] = sp[183] * w[4][0];
    sp[355] = sp[313] * w[4][0];
    sp[356] = sp[314] * w[4][0];
    sp[357] = sp[315] * w[4][0];
    sp[358] = sp[187] * w[4][0];
    sp[359] = sp[188] * w[4][0];
    sp[360] = sp[189] * w[4][0];
    sp[361] = sp[190] * w[4][0];
    sp[362] = sp[191] * w[4][0];
    sp[363] = sp[192] * w[4][0];
    sp[364] = sp[193] * w[4][0];
    sp[365] = sp[194] * w[4][0];
    sp[366] = sp[195] * w[4][0];
    sp[367] = sp[316] * w[4][0];
    sp[368] = sp[317] * w[4][0];
    sp[369] = sp[318] * w[4][0];
    sp[370] = sp[199] * w[4][0];
    sp[371] = sp[200] * w[4][0];
    sp[372] = sp[201] * w[4][0];
    sp[373] = sp[202] * w[4][0];
    sp[374] = sp[203] * w[4][0];
    sp[375] = sp[204] * w[4][0];
    sp[376] = sp[319] * w[4][0];
    sp[377] = sp[320] * w[4][0];
    sp[378] = sp[321] * w[4][0];
    sp[379] = sp[208] * w[4][0];
    sp[380] = sp[209] * w[4][0];
    sp[381] = sp[210] * w[4][0];
    sp[382] = sp[211] * w[4][0];
    sp[383] = sp[212] * w[4][0];
    sp[384] = sp[213] * w[4][0];
    sp[385] = sp[322] * w[4][0];
    sp[386] = sp[323] * w[4][0];
    sp[387] = sp[324] * w[4][0];
    sp[388] = sp[217] * w[4][0];
    sp[389] = sp[218] * w[4][0];
    sp[390] = sp[219] * w[4][0];
    sp[391] = sp[220] * w[4][0];
    sp[392] = sp[221] * w[4][0];
    sp[393] = sp[222] * w[4][0];
    sp[394] = sp[223] * w[4][0];
    sp[395] = sp[224] * w[4][0];
    sp[396] = sp[225] * w[4][0];
    sp[397] = sp[325] * w[4][0];
    sp[398] = sp[326] * w[4][0];
    sp[399] = sp[327] * w[4][0];
    sp[400] = sp[229] * w[4][0];
    sp[401] = sp[230] * w[4][0];
    sp[402] = sp[231] * w[4][0];
    sp[403] = sp[232] * w[4][0];
    sp[404] = sp[233] * w[4][0];
    sp[405] = sp[234] * w[4][0];
    sp[406] = sp[328] * w[4][0];
    sp[407] = sp[329] * w[4][0];
    sp[408] = sp[330] * w[4][0];
    sp[409] = sp[238] * w[4][0];
    sp[410] = sp[239] * w[4][0];
    sp[411] = sp[240] * w[4][0];
    sp[412] = sp[241] * w[4][0];
    sp[413] = sp[242] * w[4][0];
    sp[414] = sp[243] * w[4][0];
    sp[415] = sp[331] * w[4][0];
    sp[416] = sp[332] * w[4][0];
    sp[417] = sp[333] * w[4][0];
    sp[418] = std::abs(sp[13]);
    sp[419] = sp[334] * sp[418];
    sp[420] = sp[335] * sp[418];
    sp[421] = sp[336] * sp[418];
    sp[422] = sp[337] * sp[418];
    sp[423] = sp[338] * sp[418];
    sp[424] = sp[339] * sp[418];
    sp[425] = sp[340] * sp[418];
    sp[426] = sp[341] * sp[418];
    sp[427] = sp[342] * sp[418];
    sp[428] = sp[343] * sp[418];
    sp[429] = sp[344] * sp[418];
    sp[430] = sp[345] * sp[418];
    sp[431] = sp[346] * sp[418];
    sp[432] = sp[347] * sp[418];
    sp[433] = sp[348] * sp[418];
    sp[434] = sp[349] * sp[418];
    sp[435] = sp[350] * sp[418];
    sp[436] = sp[351] * sp[418];
    sp[437] = sp[352] * sp[418];
    sp[438] = sp[353] * sp[418];
    sp[439] = sp[354] * sp[418];
    sp[440] = sp[355] * sp[418];
    sp[441] = sp[356] * sp[418];
    sp[442] = sp[357] * sp[418];
    sp[443] = sp[358] * sp[418];
    sp[444] = sp[359] * sp[418];
    sp[445] = sp[360] * sp[418];
    sp[446] = sp[361] * sp[418];
    sp[447] = sp[362] * sp[418];
    sp[448] = sp[363] * sp[418];
    sp[449] = sp[364] * sp[418];
    sp[450] = sp[365] * sp[418];
    sp[451] = sp[366] * sp[418];
    sp[452] = sp[367] * sp[418];
    sp[453] = sp[368] * sp[418];
    sp[454] = sp[369] * sp[418];
    sp[455] = sp[370] * sp[418];
    sp[456] = sp[371] * sp[418];
    sp[457] = sp[372] * sp[418];
    sp[458] = sp[373] * sp[418];
    sp[459] = sp[374] * sp[418];
    sp[460] = sp[375] * sp[418];
    sp[461] = sp[376] * sp[418];
    sp[462] = sp[377] * sp[418];
    sp[463] = sp[378] * sp[418];
    sp[464] = sp[379] * sp[418];
    sp[465] = sp[380] * sp[418];
    sp[466] = sp[381] * sp[418];
    sp[467] = sp[382] * sp[418];
    sp[468] = sp[383] * sp[418];
    sp[469] = sp[384] * sp[418];
    sp[470] = sp[385] * sp[418];
    sp[471] = sp[386] * sp[418];
    sp[472] = sp[387] * sp[418];
    sp[473] = sp[388] * sp[418];
    sp[474] = sp[389] * sp[418];
    sp[475] = sp[390] * sp[418];
    sp[476] = sp[391] * sp[418];
    sp[477] = sp[392] * sp[418];
    sp[478] = sp[393] * sp[418];
    sp[479] = sp[394] * sp[418];
    sp[480] = sp[395] * sp[418];
    sp[481] = sp[396] * sp[418];
    sp[482] = sp[397] * sp[418];
    sp[483] = sp[398] * sp[418];
    sp[484] = sp[399] * sp[418];
    sp[485] = sp[400] * sp[418];
    sp[486] = sp[401] * sp[418];
    sp[487] = sp[402] * sp[418];
    sp[488] = sp[403] * sp[418];
    sp[489] = sp[404] * sp[418];
    sp[490] = sp[405] * sp[418];
    sp[491] = sp[406] * sp[418];
    sp[492] = sp[407] * sp[418];
    sp[493] = sp[408] * sp[418];
    sp[494] = sp[409] * sp[418];
    sp[495] = sp[410] * sp[418];
    sp[496] = sp[411] * sp[418];
    sp[497] = sp[412] * sp[418];
    sp[498] = sp[413] * sp[418];
    sp[499] = sp[414] * sp[418];
    sp[500] = sp[415] * sp[418];
    sp[501] = sp[416] * sp[418];
    sp[502] = sp[417] * sp[418];
    A[0] = 0.1666666666666667 * sp[422] + 0.1666666666666667 * sp[431] + 0.1666666666666667 * sp[440] + -0.04166666666666644 * sp[419] + 0.01666666666666656 * (-1.0 * sp[418]) + -0.04166666666666644 * sp[420] + -0.04166666666666644 * sp[421] + 0.1666666666666667 * sp[423] + 0.1666666666666667 * sp[432] + 0.1666666666666667 * sp[441] + 0.1666666666666667 * sp[424] + 0.1666666666666667 * sp[433] + 0.1666666666666667 * sp[442];
    A[1] = -0.1666666666666667 * sp[422] + 0.04166666666666644 * sp[419] + 0.008333333333333293 * (-1.0 * sp[418]) + -0.1666666666666667 * sp[423] + -0.1666666666666667 * sp[424];
    A[2] = -0.1666666666666667 * sp[431] + 0.008333333333333299 * (-1.0 * sp[418]) + 0.04166666666666644 * sp[420] + -0.1666666666666667 * sp[432] + -0.1666666666666667 * sp[433];
    A[3] = -0.1666666666666667 * sp[440] + 0.008333333333333297 * (-1.0 * sp[418]) + 0.04166666666666644 * sp[421] + -0.1666666666666667 * sp[441] + -0.1666666666666667 * sp[442];
    A[4] = 0.1666666666666667 * sp[449] + 0.1666666666666667 * sp[458] + 0.1666666666666667 * sp[467] + 0.1666666666666667 * sp[450] + 0.1666666666666667 * sp[459] + 0.1666666666666667 * sp[468] + 0.1666666666666667 * sp[451] + 0.1666666666666667 * sp[460] + 0.1666666666666667 * sp[469];
    A[5] = -0.1666666666666667 * sp[449] + -0.1666666666666667 * sp[450] + -0.1666666666666667 * sp[451];
    A[6] = -0.1666666666666667 * sp[458] + -0.1666666666666667 * sp[459] + -0.1666666666666667 * sp[460];
    A[7] = -0.1666666666666667 * sp[467] + -0.1666666666666667 * sp[468] + -0.1666666666666667 * sp[469];
    A[8] = 0.1666666666666667 * sp[476] + 0.1666666666666667 * sp[485] + 0.1666666666666667 * sp[494] + 0.1666666666666667 * sp[477] + 0.1666666666666667 * sp[486] + 0.1666666666666667 * sp[495] + 0.1666666666666667 * sp[478] + 0.1666666666666667 * sp[487] + 0.1666666666666667 * sp[496];
    A[9] = -0.1666666666666667 * sp[476] + -0.1666666666666667 * sp[477] + -0.1666666666666667 * sp[478];
    A[10] = -0.1666666666666667 * sp[485] + -0.1666666666666667 * sp[486] + -0.1666666666666667 * sp[487];
    A[11] = -0.1666666666666667 * sp[494] + -0.1666666666666667 * sp[495] + -0.1666666666666667 * sp[496];
    A[12] = -0.1666666666666667 * sp[422] + -0.1666666666666667 * sp[431] + -0.1666666666666667 * sp[440] + -0.04166666666666674 * sp[419] + 0.008333333333333293 * (-1.0 * sp[418]) + -0.04166666666666674 * sp[420] + -0.04166666666666674 * sp[421];
    A[13] = 0.1666666666666667 * sp[422] + 0.04166666666666674 * sp[419] + 0.0166666666666667 * (-1.0 * sp[418]);
    A[14] = 0.1666666666666667 * sp[431] + 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[420];
    A[15] = 0.1666666666666667 * sp[440] + 0.008333333333333371 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[421];
    A[16] = -0.1666666666666667 * sp[449] + -0.1666666666666667 * sp[458] + -0.1666666666666667 * sp[467];
    A[17] = 0.1666666666666667 * sp[449];
    A[18] = 0.1666666666666667 * sp[458];
    A[19] = 0.1666666666666667 * sp[467];
    A[20] = -0.1666666666666667 * sp[476] + -0.1666666666666667 * sp[485] + -0.1666666666666667 * sp[494];
    A[21] = 0.1666666666666667 * sp[476];
    A[22] = 0.1666666666666667 * sp[485];
    A[23] = 0.1666666666666667 * sp[494];
    A[24] = -0.04166666666666675 * sp[419] + 0.008333333333333299 * (-1.0 * sp[418]) + -0.04166666666666675 * sp[420] + -0.04166666666666675 * sp[421] + -0.1666666666666667 * sp[423] + -0.1666666666666667 * sp[432] + -0.1666666666666667 * sp[441];
    A[25] = 0.04166666666666675 * sp[419] + 0.008333333333333373 * (-1.0 * sp[418]) + 0.1666666666666667 * sp[423];
    A[26] = 0.01666666666666671 * (-1.0 * sp[418]) + 0.04166666666666675 * sp[420] + 0.1666666666666667 * sp[432];
    A[27] = 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666675 * sp[421] + 0.1666666666666667 * sp[441];
    A[28] = -0.1666666666666667 * sp[450] + -0.1666666666666667 * sp[459] + -0.1666666666666667 * sp[468];
    A[29] = 0.1666666666666667 * sp[450];
    A[30] = 0.1666666666666667 * sp[459];
    A[31] = 0.1666666666666667 * sp[468];
    A[32] = -0.1666666666666667 * sp[477] + -0.1666666666666667 * sp[486] + -0.1666666666666667 * sp[495];
    A[33] = 0.1666666666666667 * sp[477];
    A[34] = 0.1666666666666667 * sp[486];
    A[35] = 0.1666666666666667 * sp[495];
    A[36] = -0.04166666666666674 * sp[419] + 0.008333333333333297 * (-1.0 * sp[418]) + -0.04166666666666674 * sp[420] + -0.04166666666666674 * sp[421] + -0.1666666666666667 * sp[424] + -0.1666666666666667 * sp[433] + -0.1666666666666667 * sp[442];
    A[37] = 0.04166666666666674 * sp[419] + 0.008333333333333371 * (-1.0 * sp[418]) + 0.1666666666666667 * sp[424];
    A[38] = 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[420] + 0.1666666666666667 * sp[433];
    A[39] = 0.01666666666666671 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[421] + 0.1666666666666667 * sp[442];
    A[40] = -0.1666666666666667 * sp[451] + -0.1666666666666667 * sp[460] + -0.1666666666666667 * sp[469];
    A[41] = 0.1666666666666667 * sp[451];
    A[42] = 0.1666666666666667 * sp[460];
    A[43] = 0.1666666666666667 * sp[469];
    A[44] = -0.1666666666666667 * sp[478] + -0.1666666666666667 * sp[487] + -0.1666666666666667 * sp[496];
    A[45] = 0.1666666666666667 * sp[478];
    A[46] = 0.1666666666666667 * sp[487];
    A[47] = 0.1666666666666667 * sp[496];
    A[48] = 0.1666666666666667 * sp[425] + 0.1666666666666667 * sp[434] + 0.1666666666666667 * sp[443] + 0.1666666666666667 * sp[426] + 0.1666666666666667 * sp[435] + 0.1666666666666667 * sp[444] + 0.1666666666666667 * sp[427] + 0.1666666666666667 * sp[436] + 0.1666666666666667 * sp[445];
    A[49] = -0.1666666666666667 * sp[425] + -0.1666666666666667 * sp[426] + -0.1666666666666667 * sp[427];
    A[50] = -0.1666666666666667 * sp[434] + -0.1666666666666667 * sp[435] + -0.1666666666666667 * sp[436];
    A[51] = -0.1666666666666667 * sp[443] + -0.1666666666666667 * sp[444] + -0.1666666666666667 * sp[445];
    A[52] = 0.1666666666666667 * sp[452] + 0.1666666666666667 * sp[461] + 0.1666666666666667 * sp[470] + -0.04166666666666644 * sp[419] + 0.01666666666666656 * (-1.0 * sp[418]) + -0.04166666666666644 * sp[420] + -0.04166666666666644 * sp[421] + 0.1666666666666667 * sp[453] + 0.1666666666666667 * sp[462] + 0.1666666666666667 * sp[471] + 0.1666666666666667 * sp[454] + 0.1666666666666667 * sp[463] + 0.1666666666666667 * sp[472];
    A[53] = -0.1666666666666667 * sp[452] + 0.04166666666666644 * sp[419] + 0.008333333333333293 * (-1.0 * sp[418]) + -0.1666666666666667 * sp[453] + -0.1666666666666667 * sp[454];
    A[54] = -0.1666666666666667 * sp[461] + 0.008333333333333299 * (-1.0 * sp[418]) + 0.04166666666666644 * sp[420] + -0.1666666666666667 * sp[462] + -0.1666666666666667 * sp[463];
    A[55] = -0.1666666666666667 * sp[470] + 0.008333333333333297 * (-1.0 * sp[418]) + 0.04166666666666644 * sp[421] + -0.1666666666666667 * sp[471] + -0.1666666666666667 * sp[472];
    A[56] = 0.1666666666666667 * sp[479] + 0.1666666666666667 * sp[488] + 0.1666666666666667 * sp[497] + 0.1666666666666667 * sp[480] + 0.1666666666666667 * sp[489] + 0.1666666666666667 * sp[498] + 0.1666666666666667 * sp[481] + 0.1666666666666667 * sp[490] + 0.1666666666666667 * sp[499];
    A[57] = -0.1666666666666667 * sp[479] + -0.1666666666666667 * sp[480] + -0.1666666666666667 * sp[481];
    A[58] = -0.1666666666666667 * sp[488] + -0.1666666666666667 * sp[489] + -0.1666666666666667 * sp[490];
    A[59] = -0.1666666666666667 * sp[497] + -0.1666666666666667 * sp[498] + -0.1666666666666667 * sp[499];
    A[60] = -0.1666666666666667 * sp[425] + -0.1666666666666667 * sp[434] + -0.1666666666666667 * sp[443];
    A[61] = 0.1666666666666667 * sp[425];
    A[62] = 0.1666666666666667 * sp[434];
    A[63] = 0.1666666666666667 * sp[443];
    A[64] = -0.1666666666666667 * sp[452] + -0.1666666666666667 * sp[461] + -0.1666666666666667 * sp[470] + -0.04166666666666674 * sp[419] + 0.008333333333333293 * (-1.0 * sp[418]) + -0.04166666666666674 * sp[420] + -0.04166666666666674 * sp[421];
    A[65] = 0.1666666666666667 * sp[452] + 0.04166666666666674 * sp[419] + 0.0166666666666667 * (-1.0 * sp[418]);
    A[66] = 0.1666666666666667 * sp[461] + 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[420];
    A[67] = 0.1666666666666667 * sp[470] + 0.008333333333333371 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[421];
    A[68] = -0.1666666666666667 * sp[479] + -0.1666666666666667 * sp[488] + -0.1666666666666667 * sp[497];
    A[69] = 0.1666666666666667 * sp[479];
    A[70] = 0.1666666666666667 * sp[488];
    A[71] = 0.1666666666666667 * sp[497];
    A[72] = -0.1666666666666667 * sp[426] + -0.1666666666666667 * sp[435] + -0.1666666666666667 * sp[444];
    A[73] = 0.1666666666666667 * sp[426];
    A[74] = 0.1666666666666667 * sp[435];
    A[75] = 0.1666666666666667 * sp[444];
    A[76] = -0.04166666666666675 * sp[419] + 0.008333333333333299 * (-1.0 * sp[418]) + -0.04166666666666675 * sp[420] + -0.04166666666666675 * sp[421] + -0.1666666666666667 * sp[453] + -0.1666666666666667 * sp[462] + -0.1666666666666667 * sp[471];
    A[77] = 0.04166666666666675 * sp[419] + 0.008333333333333373 * (-1.0 * sp[418]) + 0.1666666666666667 * sp[453];
    A[78] = 0.01666666666666671 * (-1.0 * sp[418]) + 0.04166666666666675 * sp[420] + 0.1666666666666667 * sp[462];
    A[79] = 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666675 * sp[421] + 0.1666666666666667 * sp[471];
    A[80] = -0.1666666666666667 * sp[480] + -0.1666666666666667 * sp[489] + -0.1666666666666667 * sp[498];
    A[81] = 0.1666666666666667 * sp[480];
    A[82] = 0.1666666666666667 * sp[489];
    A[83] = 0.1666666666666667 * sp[498];
    A[84] = -0.1666666666666667 * sp[427] + -0.1666666666666667 * sp[436] + -0.1666666666666667 * sp[445];
    A[85] = 0.1666666666666667 * sp[427];
    A[86] = 0.1666666666666667 * sp[436];
    A[87] = 0.1666666666666667 * sp[445];
    A[88] = -0.04166666666666674 * sp[419] + 0.008333333333333297 * (-1.0 * sp[418]) + -0.04166666666666674 * sp[420] + -0.04166666666666674 * sp[421] + -0.1666666666666667 * sp[454] + -0.1666666666666667 * sp[463] + -0.1666666666666667 * sp[472];
    A[89] = 0.04166666666666674 * sp[419] + 0.008333333333333371 * (-1.0 * sp[418]) + 0.1666666666666667 * sp[454];
    A[90] = 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[420] + 0.1666666666666667 * sp[463];
    A[91] = 0.01666666666666671 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[421] + 0.1666666666666667 * sp[472];
    A[92] = -0.1666666666666667 * sp[481] + -0.1666666666666667 * sp[490] + -0.1666666666666667 * sp[499];
    A[93] = 0.1666666666666667 * sp[481];
    A[94] = 0.1666666666666667 * sp[490];
    A[95] = 0.1666666666666667 * sp[499];
    A[96] = 0.1666666666666667 * sp[428] + 0.1666666666666667 * sp[437] + 0.1666666666666667 * sp[446] + 0.1666666666666667 * sp[429] + 0.1666666666666667 * sp[438] + 0.1666666666666667 * sp[447] + 0.1666666666666667 * sp[430] + 0.1666666666666667 * sp[439] + 0.1666666666666667 * sp[448];
    A[97] = -0.1666666666666667 * sp[428] + -0.1666666666666667 * sp[429] + -0.1666666666666667 * sp[430];
    A[98] = -0.1666666666666667 * sp[437] + -0.1666666666666667 * sp[438] + -0.1666666666666667 * sp[439];
    A[99] = -0.1666666666666667 * sp[446] + -0.1666666666666667 * sp[447] + -0.1666666666666667 * sp[448];
    A[100] = 0.1666666666666667 * sp[455] + 0.1666666666666667 * sp[464] + 0.1666666666666667 * sp[473] + 0.1666666666666667 * sp[456] + 0.1666666666666667 * sp[465] + 0.1666666666666667 * sp[474] + 0.1666666666666667 * sp[457] + 0.1666666666666667 * sp[466] + 0.1666666666666667 * sp[475];
    A[101] = -0.1666666666666667 * sp[455] + -0.1666666666666667 * sp[456] + -0.1666666666666667 * sp[457];
    A[102] = -0.1666666666666667 * sp[464] + -0.1666666666666667 * sp[465] + -0.1666666666666667 * sp[466];
    A[103] = -0.1666666666666667 * sp[473] + -0.1666666666666667 * sp[474] + -0.1666666666666667 * sp[475];
    A[104] = 0.1666666666666667 * sp[482] + 0.1666666666666667 * sp[491] + 0.1666666666666667 * sp[500] + -0.04166666666666644 * sp[419] + 0.01666666666666656 * (-1.0 * sp[418]) + -0.04166666666666644 * sp[420] + -0.04166666666666644 * sp[421] + 0.1666666666666667 * sp[483] + 0.1666666666666667 * sp[492] + 0.1666666666666667 * sp[501] + 0.1666666666666667 * sp[484] + 0.1666666666666667 * sp[493] + 0.1666666666666667 * sp[502];
    A[105] = -0.1666666666666667 * sp[482] + 0.04166666666666644 * sp[419] + 0.008333333333333293 * (-1.0 * sp[418]) + -0.1666666666666667 * sp[483] + -0.1666666666666667 * sp[484];
    A[106] = -0.1666666666666667 * sp[491] + 0.008333333333333299 * (-1.0 * sp[418]) + 0.04166666666666644 * sp[420] + -0.1666666666666667 * sp[492] + -0.1666666666666667 * sp[493];
    A[107] = -0.1666666666666667 * sp[500] + 0.008333333333333297 * (-1.0 * sp[418]) + 0.04166666666666644 * sp[421] + -0.1666666666666667 * sp[501] + -0.1666666666666667 * sp[502];
    A[108] = -0.1666666666666667 * sp[428] + -0.1666666666666667 * sp[437] + -0.1666666666666667 * sp[446];
    A[109] = 0.1666666666666667 * sp[428];
    A[110] = 0.1666666666666667 * sp[437];
    A[111] = 0.1666666666666667 * sp[446];
    A[112] = -0.1666666666666667 * sp[455] + -0.1666666666666667 * sp[464] + -0.1666666666666667 * sp[473];
    A[113] = 0.1666666666666667 * sp[455];
    A[114] = 0.1666666666666667 * sp[464];
    A[115] = 0.1666666666666667 * sp[473];
    A[116] = -0.1666666666666667 * sp[482] + -0.1666666666666667 * sp[491] + -0.1666666666666667 * sp[500] + -0.04166666666666674 * sp[419] + 0.008333333333333293 * (-1.0 * sp[418]) + -0.04166666666666674 * sp[420] + -0.04166666666666674 * sp[421];
    A[117] = 0.1666666666666667 * sp[482] + 0.04166666666666674 * sp[419] + 0.0166666666666667 * (-1.0 * sp[418]);
    A[118] = 0.1666666666666667 * sp[491] + 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[420];
    A[119] = 0.1666666666666667 * sp[500] + 0.008333333333333371 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[421];
    A[120] = -0.1666666666666667 * sp[429] + -0.1666666666666667 * sp[438] + -0.1666666666666667 * sp[447];
    A[121] = 0.1666666666666667 * sp[429];
    A[122] = 0.1666666666666667 * sp[438];
    A[123] = 0.1666666666666667 * sp[447];
    A[124] = -0.1666666666666667 * sp[456] + -0.1666666666666667 * sp[465] + -0.1666666666666667 * sp[474];
    A[125] = 0.1666666666666667 * sp[456];
    A[126] = 0.1666666666666667 * sp[465];
    A[127] = 0.1666666666666667 * sp[474];
    A[128] = -0.04166666666666675 * sp[419] + 0.008333333333333299 * (-1.0 * sp[418]) + -0.04166666666666675 * sp[420] + -0.04166666666666675 * sp[421] + -0.1666666666666667 * sp[483] + -0.1666666666666667 * sp[492] + -0.1666666666666667 * sp[501];
    A[129] = 0.04166666666666675 * sp[419] + 0.008333333333333373 * (-1.0 * sp[418]) + 0.1666666666666667 * sp[483];
    A[130] = 0.01666666666666671 * (-1.0 * sp[418]) + 0.04166666666666675 * sp[420] + 0.1666666666666667 * sp[492];
    A[131] = 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666675 * sp[421] + 0.1666666666666667 * sp[501];
    A[132] = -0.1666666666666667 * sp[430] + -0.1666666666666667 * sp[439] + -0.1666666666666667 * sp[448];
    A[133] = 0.1666666666666667 * sp[430];
    A[134] = 0.1666666666666667 * sp[439];
    A[135] = 0.1666666666666667 * sp[448];
    A[136] = -0.1666666666666667 * sp[457] + -0.1666666666666667 * sp[466] + -0.1666666666666667 * sp[475];
    A[137] = 0.1666666666666667 * sp[457];
    A[138] = 0.1666666666666667 * sp[466];
    A[139] = 0.1666666666666667 * sp[475];
    A[140] = -0.04166666666666674 * sp[419] + 0.008333333333333297 * (-1.0 * sp[418]) + -0.04166666666666674 * sp[420] + -0.04166666666666674 * sp[421] + -0.1666666666666667 * sp[484] + -0.1666666666666667 * sp[493] + -0.1666666666666667 * sp[502];
    A[141] = 0.04166666666666674 * sp[419] + 0.008333333333333371 * (-1.0 * sp[418]) + 0.1666666666666667 * sp[484];
    A[142] = 0.008333333333333373 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[420] + 0.1666666666666667 * sp[493];
    A[143] = 0.01666666666666671 * (-1.0 * sp[418]) + 0.04166666666666674 * sp[421] + 0.1666666666666667 * sp[502];
  }

};


class navierstokes3d_cell_integral_1_otherwise: public ufc::cell_integral
{
public:

  navierstokes3d_cell_integral_1_otherwise() : ufc::cell_integral()
  {

  }

  ~navierstokes3d_cell_integral_1_otherwise() override
  {

  }

  const std::vector<bool> & enabled_coefficients() const final override
  {
static const std::vector<bool> enabled({true, true, true, true, true, true, true, true});
return enabled;
  }

  void tabulate_tensor(double * A,
                       const double * const * w,
                       const double * coordinate_dofs,
                       int cell_orientation) const final override
  {
    // This function was generated using 'uflacs' representation
    // with the following integrals metadata:
    // 
    // num_cells:         None
    // optimize:          True
    // precision:         16
    // quadrature_degree: 2
    // quadrature_rule:   'default'
    // representation:    'uflacs'
    // 
    // and the following integral 0 metadata:
    // 
    // estimated_polynomial_degree: 2
    // optimize:                    True
    // precision:                   16
    // quadrature_degree:           2
    // quadrature_rule:             'default'
    // representation:              'uflacs'
    // Quadrature rules
    alignas(32) static const double weights4[4] = { 0.04166666666666666, 0.04166666666666666, 0.04166666666666666, 0.04166666666666666 };
    // Precomputed values of basis functions and precomputations
    // FE* dimensions: [entities][points][dofs]
    // PI* dimensions: [entities][dofs][dofs] or [entities][dofs]
    // PM* dimensions: [entities][dofs][dofs]
    alignas(32) static const double FE44_C0_D001_Q4[1][1][2] = { { { -1.0, 1.0 } } };
    alignas(32) static const double FE44_C0_Q4[1][4][4] =
        { { { 0.1381966011250091, 0.585410196624969, 0.138196601125011, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.585410196624969, 0.138196601125011 },
            { 0.1381966011250091, 0.1381966011250109, 0.138196601125011, 0.585410196624969 },
            { 0.5854101966249672, 0.1381966011250109, 0.138196601125011, 0.138196601125011 } } };
    // Unstructured piecewise computations
    double w0_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c0 += w[0][ic] * FE44_C0_D001_Q4[0][0][ic];
    const double J_c4 = coordinate_dofs[1] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[7] * FE44_C0_D001_Q4[0][0][1];
    const double J_c8 = coordinate_dofs[2] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[11] * FE44_C0_D001_Q4[0][0][1];
    const double J_c5 = coordinate_dofs[1] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[10] * FE44_C0_D001_Q4[0][0][1];
    const double J_c7 = coordinate_dofs[2] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[8] * FE44_C0_D001_Q4[0][0][1];
    const double J_c0 = coordinate_dofs[0] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[3] * FE44_C0_D001_Q4[0][0][1];
    const double J_c1 = coordinate_dofs[0] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[6] * FE44_C0_D001_Q4[0][0][1];
    const double J_c6 = coordinate_dofs[2] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[5] * FE44_C0_D001_Q4[0][0][1];
    const double J_c3 = coordinate_dofs[1] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[4] * FE44_C0_D001_Q4[0][0][1];
    const double J_c2 = coordinate_dofs[0] * FE44_C0_D001_Q4[0][0][0] + coordinate_dofs[9] * FE44_C0_D001_Q4[0][0][1];
    const double w0_d1_c0 = w[0][0] * FE44_C0_D001_Q4[0][0][0] + w[0][2] * FE44_C0_D001_Q4[0][0][1];
    const double w0_d2_c0 = w[0][0] * FE44_C0_D001_Q4[0][0][0] + w[0][3] * FE44_C0_D001_Q4[0][0][1];
    double w0_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c1 += w[0][ic + 4] * FE44_C0_D001_Q4[0][0][ic];
    const double w0_d1_c1 = w[0][4] * FE44_C0_D001_Q4[0][0][0] + w[0][6] * FE44_C0_D001_Q4[0][0][1];
    const double w0_d2_c1 = w[0][4] * FE44_C0_D001_Q4[0][0][0] + w[0][7] * FE44_C0_D001_Q4[0][0][1];
    double w0_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w0_d0_c2 += w[0][ic + 8] * FE44_C0_D001_Q4[0][0][ic];
    const double w0_d1_c2 = w[0][8] * FE44_C0_D001_Q4[0][0][0] + w[0][10] * FE44_C0_D001_Q4[0][0][1];
    const double w0_d2_c2 = w[0][8] * FE44_C0_D001_Q4[0][0][0] + w[0][11] * FE44_C0_D001_Q4[0][0][1];
    double w1_d0_c0 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c0 += w[1][ic] * FE44_C0_D001_Q4[0][0][ic];
    const double w1_d1_c0 = w[1][0] * FE44_C0_D001_Q4[0][0][0] + w[1][2] * FE44_C0_D001_Q4[0][0][1];
    const double w1_d2_c0 = w[1][0] * FE44_C0_D001_Q4[0][0][0] + w[1][3] * FE44_C0_D001_Q4[0][0][1];
    double w1_d0_c1 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c1 += w[1][ic + 4] * FE44_C0_D001_Q4[0][0][ic];
    const double w1_d1_c1 = w[1][4] * FE44_C0_D001_Q4[0][0][0] + w[1][6] * FE44_C0_D001_Q4[0][0][1];
    const double w1_d2_c1 = w[1][4] * FE44_C0_D001_Q4[0][0][0] + w[1][7] * FE44_C0_D001_Q4[0][0][1];
    double w1_d0_c2 = 0.0;
    for (int ic = 0; ic < 2; ++ic)
        w1_d0_c2 += w[1][ic + 8] * FE44_C0_D001_Q4[0][0][ic];
    const double w1_d1_c2 = w[1][8] * FE44_C0_D001_Q4[0][0][0] + w[1][10] * FE44_C0_D001_Q4[0][0][1];
    const double w1_d2_c2 = w[1][8] * FE44_C0_D001_Q4[0][0][0] + w[1][11] * FE44_C0_D001_Q4[0][0][1];
    alignas(32) double sp[370];
    sp[0] = J_c4 * J_c8;
    sp[1] = J_c5 * J_c7;
    sp[2] = sp[0] + -1 * sp[1];
    sp[3] = J_c0 * sp[2];
    sp[4] = J_c5 * J_c6;
    sp[5] = J_c3 * J_c8;
    sp[6] = sp[4] + -1 * sp[5];
    sp[7] = J_c1 * sp[6];
    sp[8] = sp[3] + sp[7];
    sp[9] = J_c3 * J_c7;
    sp[10] = J_c4 * J_c6;
    sp[11] = sp[9] + -1 * sp[10];
    sp[12] = J_c2 * sp[11];
    sp[13] = sp[8] + sp[12];
    sp[14] = sp[2] / sp[13];
    sp[15] = w0_d0_c0 * sp[14];
    sp[16] = J_c3 * (-1 * J_c8);
    sp[17] = sp[4] + sp[16];
    sp[18] = sp[17] / sp[13];
    sp[19] = w0_d1_c0 * sp[18];
    sp[20] = sp[15] + sp[19];
    sp[21] = sp[11] / sp[13];
    sp[22] = w0_d2_c0 * sp[21];
    sp[23] = sp[20] + sp[22];
    sp[24] = w[2][0] * (0.5 * sp[23]);
    sp[25] = J_c2 * J_c7;
    sp[26] = J_c8 * (-1 * J_c1);
    sp[27] = sp[25] + sp[26];
    sp[28] = sp[27] / sp[13];
    sp[29] = w0_d0_c0 * sp[28];
    sp[30] = J_c0 * J_c8;
    sp[31] = J_c6 * (-1 * J_c2);
    sp[32] = sp[30] + sp[31];
    sp[33] = sp[32] / sp[13];
    sp[34] = w0_d1_c0 * sp[33];
    sp[35] = sp[29] + sp[34];
    sp[36] = J_c1 * J_c6;
    sp[37] = J_c0 * J_c7;
    sp[38] = sp[36] + -1 * sp[37];
    sp[39] = sp[38] / sp[13];
    sp[40] = w0_d2_c0 * sp[39];
    sp[41] = sp[35] + sp[40];
    sp[42] = w[2][1] * (0.5 * sp[41]);
    sp[43] = sp[24] + sp[42];
    sp[44] = J_c1 * J_c5;
    sp[45] = J_c2 * J_c4;
    sp[46] = sp[44] + -1 * sp[45];
    sp[47] = sp[46] / sp[13];
    sp[48] = w0_d0_c0 * sp[47];
    sp[49] = J_c2 * J_c3;
    sp[50] = J_c0 * J_c5;
    sp[51] = sp[49] + -1 * sp[50];
    sp[52] = sp[51] / sp[13];
    sp[53] = w0_d1_c0 * sp[52];
    sp[54] = sp[48] + sp[53];
    sp[55] = J_c0 * J_c4;
    sp[56] = J_c1 * J_c3;
    sp[57] = sp[55] + -1 * sp[56];
    sp[58] = sp[57] / sp[13];
    sp[59] = w0_d2_c0 * sp[58];
    sp[60] = sp[54] + sp[59];
    sp[61] = w[2][2] * (0.5 * sp[60]);
    sp[62] = sp[43] + sp[61];
    sp[63] = w0_d0_c1 * sp[14];
    sp[64] = w0_d1_c1 * sp[18];
    sp[65] = sp[63] + sp[64];
    sp[66] = w0_d2_c1 * sp[21];
    sp[67] = sp[65] + sp[66];
    sp[68] = w[2][0] * (0.5 * sp[67]);
    sp[69] = w0_d0_c1 * sp[28];
    sp[70] = w0_d1_c1 * sp[33];
    sp[71] = sp[69] + sp[70];
    sp[72] = w0_d2_c1 * sp[39];
    sp[73] = sp[71] + sp[72];
    sp[74] = w[2][1] * (0.5 * sp[73]);
    sp[75] = sp[68] + sp[74];
    sp[76] = w0_d0_c1 * sp[47];
    sp[77] = w0_d1_c1 * sp[52];
    sp[78] = sp[76] + sp[77];
    sp[79] = w0_d2_c1 * sp[58];
    sp[80] = sp[78] + sp[79];
    sp[81] = w[2][2] * (0.5 * sp[80]);
    sp[82] = sp[75] + sp[81];
    sp[83] = w0_d0_c2 * sp[14];
    sp[84] = w0_d1_c2 * sp[18];
    sp[85] = sp[83] + sp[84];
    sp[86] = w0_d2_c2 * sp[21];
    sp[87] = sp[85] + sp[86];
    sp[88] = w[2][0] * (0.5 * sp[87]);
    sp[89] = w0_d0_c2 * sp[28];
    sp[90] = w0_d1_c2 * sp[33];
    sp[91] = sp[89] + sp[90];
    sp[92] = w0_d2_c2 * sp[39];
    sp[93] = sp[91] + sp[92];
    sp[94] = w[2][1] * (0.5 * sp[93]);
    sp[95] = sp[88] + sp[94];
    sp[96] = w0_d0_c2 * sp[47];
    sp[97] = w0_d1_c2 * sp[52];
    sp[98] = sp[96] + sp[97];
    sp[99] = w0_d2_c2 * sp[58];
    sp[100] = sp[98] + sp[99];
    sp[101] = w[2][2] * (0.5 * sp[100]);
    sp[102] = sp[95] + sp[101];
    sp[103] = 0.5 * sp[23] * sp[14];
    sp[104] = 0.5 * sp[23] * sp[18];
    sp[105] = 0.5 * sp[23] * sp[21];
    sp[106] = 0.5 * sp[67] * sp[14];
    sp[107] = 0.5 * sp[67] * sp[18];
    sp[108] = 0.5 * sp[67] * sp[21];
    sp[109] = 0.5 * sp[87] * sp[14];
    sp[110] = 0.5 * sp[87] * sp[18];
    sp[111] = 0.5 * sp[87] * sp[21];
    sp[112] = 0.5 * sp[41] * sp[28];
    sp[113] = 0.5 * sp[41] * sp[33];
    sp[114] = 0.5 * sp[41] * sp[39];
    sp[115] = 0.5 * sp[73] * sp[28];
    sp[116] = 0.5 * sp[73] * sp[33];
    sp[117] = 0.5 * sp[73] * sp[39];
    sp[118] = 0.5 * sp[93] * sp[28];
    sp[119] = 0.5 * sp[93] * sp[33];
    sp[120] = 0.5 * sp[93] * sp[39];
    sp[121] = sp[112] + sp[103];
    sp[122] = sp[113] + sp[104];
    sp[123] = sp[105] + sp[114];
    sp[124] = sp[115] + sp[106];
    sp[125] = sp[116] + sp[107];
    sp[126] = sp[108] + sp[117];
    sp[127] = sp[118] + sp[109];
    sp[128] = sp[119] + sp[110];
    sp[129] = sp[111] + sp[120];
    sp[130] = 0.5 * sp[60] * sp[47];
    sp[131] = 0.5 * sp[60] * sp[52];
    sp[132] = 0.5 * sp[60] * sp[58];
    sp[133] = 0.5 * sp[80] * sp[47];
    sp[134] = 0.5 * sp[80] * sp[52];
    sp[135] = 0.5 * sp[80] * sp[58];
    sp[136] = 0.5 * sp[100] * sp[47];
    sp[137] = 0.5 * sp[100] * sp[52];
    sp[138] = 0.5 * sp[100] * sp[58];
    sp[139] = sp[121] + sp[130];
    sp[140] = sp[122] + sp[131];
    sp[141] = sp[123] + sp[132];
    sp[142] = sp[124] + sp[133];
    sp[143] = sp[125] + sp[134];
    sp[144] = sp[126] + sp[135];
    sp[145] = sp[127] + sp[136];
    sp[146] = sp[128] + sp[137];
    sp[147] = sp[129] + sp[138];
    sp[148] = sp[139] * (-1 * w[4][0]);
    sp[149] = sp[140] * (-1 * w[4][0]);
    sp[150] = sp[141] * (-1 * w[4][0]);
    sp[151] = sp[142] * (-1 * w[4][0]);
    sp[152] = sp[143] * (-1 * w[4][0]);
    sp[153] = sp[144] * (-1 * w[4][0]);
    sp[154] = sp[145] * (-1 * w[4][0]);
    sp[155] = sp[146] * (-1 * w[4][0]);
    sp[156] = sp[147] * (-1 * w[4][0]);
    sp[157] = 0.5 * sp[23] + 0.5 * sp[73];
    sp[158] = sp[157] + 0.5 * sp[100];
    sp[159] = sp[158] * sp[14];
    sp[160] = sp[158] * sp[18];
    sp[161] = sp[158] * sp[21];
    sp[162] = sp[158] * sp[28];
    sp[163] = sp[158] * sp[33];
    sp[164] = sp[158] * sp[39];
    sp[165] = sp[158] * sp[47];
    sp[166] = sp[158] * sp[52];
    sp[167] = sp[158] * sp[58];
    sp[168] = sp[159] * (-1 * w[6][0]);
    sp[169] = sp[160] * (-1 * w[6][0]);
    sp[170] = sp[161] * (-1 * w[6][0]);
    sp[171] = sp[162] * (-1 * w[6][0]);
    sp[172] = sp[163] * (-1 * w[6][0]);
    sp[173] = sp[164] * (-1 * w[6][0]);
    sp[174] = sp[165] * (-1 * w[6][0]);
    sp[175] = sp[166] * (-1 * w[6][0]);
    sp[176] = sp[167] * (-1 * w[6][0]);
    sp[177] = sp[148] + sp[168];
    sp[178] = sp[149] + sp[169];
    sp[179] = sp[150] + sp[170];
    sp[180] = sp[151] + sp[171];
    sp[181] = sp[152] + sp[172];
    sp[182] = sp[153] + sp[173];
    sp[183] = sp[154] + sp[174];
    sp[184] = sp[155] + sp[175];
    sp[185] = sp[156] + sp[176];
    sp[186] = w[2][0] * sp[14];
    sp[187] = w[2][0] * sp[18];
    sp[188] = w[2][0] * sp[21];
    sp[189] = w[2][1] * sp[28];
    sp[190] = w[2][1] * sp[33];
    sp[191] = w[2][1] * sp[39];
    sp[192] = sp[189] + sp[186];
    sp[193] = sp[190] + sp[187];
    sp[194] = sp[188] + sp[191];
    sp[195] = w[2][2] * sp[47];
    sp[196] = w[2][2] * sp[52];
    sp[197] = w[2][2] * sp[58];
    sp[198] = sp[192] + sp[195];
    sp[199] = sp[193] + sp[196];
    sp[200] = sp[194] + sp[197];
    sp[201] = sp[62] * sp[198];
    sp[202] = sp[62] * sp[199];
    sp[203] = sp[62] * sp[200];
    sp[204] = sp[82] * sp[198];
    sp[205] = sp[82] * sp[199];
    sp[206] = sp[82] * sp[200];
    sp[207] = sp[102] * sp[198];
    sp[208] = sp[102] * sp[199];
    sp[209] = sp[102] * sp[200];
    sp[210] = sp[201] * (-1 * w[5][0]);
    sp[211] = sp[202] * (-1 * w[5][0]);
    sp[212] = sp[203] * (-1 * w[5][0]);
    sp[213] = sp[204] * (-1 * w[5][0]);
    sp[214] = sp[205] * (-1 * w[5][0]);
    sp[215] = sp[206] * (-1 * w[5][0]);
    sp[216] = sp[207] * (-1 * w[5][0]);
    sp[217] = sp[208] * (-1 * w[5][0]);
    sp[218] = sp[209] * (-1 * w[5][0]);
    sp[219] = sp[177] + sp[210];
    sp[220] = sp[178] + sp[211];
    sp[221] = sp[179] + sp[212];
    sp[222] = sp[180] + sp[213];
    sp[223] = sp[181] + sp[214];
    sp[224] = sp[182] + sp[215];
    sp[225] = sp[183] + sp[216];
    sp[226] = sp[184] + sp[217];
    sp[227] = sp[185] + sp[218];
    sp[228] = -1 * sp[62] * w[7][0];
    sp[229] = -1 * sp[82] * w[7][0];
    sp[230] = -1 * sp[102] * w[7][0];
    sp[231] = sp[219] * w[7][0];
    sp[232] = sp[220] * w[7][0];
    sp[233] = sp[221] * w[7][0];
    sp[234] = sp[222] * w[7][0];
    sp[235] = sp[223] * w[7][0];
    sp[236] = sp[224] * w[7][0];
    sp[237] = sp[225] * w[7][0];
    sp[238] = sp[226] * w[7][0];
    sp[239] = sp[227] * w[7][0];
    sp[240] = sp[23] * w[4][0];
    sp[241] = sp[67] * w[4][0];
    sp[242] = -1 * sp[241] * sp[14];
    sp[243] = -1 * sp[241] * sp[18];
    sp[244] = -1 * sp[241] * sp[21];
    sp[245] = sp[87] * w[4][0];
    sp[246] = -1 * sp[245] * sp[14];
    sp[247] = -1 * sp[245] * sp[18];
    sp[248] = -1 * sp[245] * sp[21];
    sp[249] = sp[73] * w[4][0];
    sp[250] = sp[41] * w[4][0];
    sp[251] = -1 * sp[250] * sp[28];
    sp[252] = -1 * sp[250] * sp[33];
    sp[253] = -1 * sp[250] * sp[39];
    sp[254] = sp[93] * w[4][0];
    sp[255] = -1 * sp[254] * sp[28];
    sp[256] = -1 * sp[254] * sp[33];
    sp[257] = -1 * sp[254] * sp[39];
    sp[258] = sp[255] + sp[246];
    sp[259] = sp[256] + sp[247];
    sp[260] = sp[248] + sp[257];
    sp[261] = sp[60] * w[4][0];
    sp[262] = -1 * sp[261] * sp[47];
    sp[263] = -1 * sp[261] * sp[52];
    sp[264] = -1 * sp[261] * sp[58];
    sp[265] = sp[80] * w[4][0];
    sp[266] = -1 * sp[265] * sp[47];
    sp[267] = -1 * sp[265] * sp[52];
    sp[268] = -1 * sp[265] * sp[58];
    sp[269] = sp[100] * w[4][0];
    sp[270] = w1_d0_c0 * sp[14];
    sp[271] = w1_d1_c0 * sp[18];
    sp[272] = sp[270] + sp[271];
    sp[273] = w1_d2_c0 * sp[21];
    sp[274] = sp[272] + sp[273];
    sp[275] = sp[23] + sp[274];
    sp[276] = w1_d0_c0 * sp[28];
    sp[277] = w1_d1_c0 * sp[33];
    sp[278] = sp[276] + sp[277];
    sp[279] = w1_d2_c0 * sp[39];
    sp[280] = sp[278] + sp[279];
    sp[281] = sp[41] + sp[280];
    sp[282] = w1_d0_c0 * sp[47];
    sp[283] = w1_d1_c0 * sp[52];
    sp[284] = sp[282] + sp[283];
    sp[285] = w1_d2_c0 * sp[58];
    sp[286] = sp[284] + sp[285];
    sp[287] = sp[60] + sp[286];
    sp[288] = w1_d0_c1 * sp[14];
    sp[289] = w1_d1_c1 * sp[18];
    sp[290] = sp[288] + sp[289];
    sp[291] = w1_d2_c1 * sp[21];
    sp[292] = sp[290] + sp[291];
    sp[293] = sp[67] + sp[292];
    sp[294] = w1_d0_c1 * sp[28];
    sp[295] = w1_d1_c1 * sp[33];
    sp[296] = sp[294] + sp[295];
    sp[297] = w1_d2_c1 * sp[39];
    sp[298] = sp[296] + sp[297];
    sp[299] = sp[73] + sp[298];
    sp[300] = w1_d0_c1 * sp[47];
    sp[301] = w1_d1_c1 * sp[52];
    sp[302] = sp[300] + sp[301];
    sp[303] = w1_d2_c1 * sp[58];
    sp[304] = sp[302] + sp[303];
    sp[305] = sp[80] + sp[304];
    sp[306] = w1_d0_c2 * sp[14];
    sp[307] = w1_d1_c2 * sp[18];
    sp[308] = sp[306] + sp[307];
    sp[309] = w1_d2_c2 * sp[21];
    sp[310] = sp[308] + sp[309];
    sp[311] = sp[87] + sp[310];
    sp[312] = w1_d0_c2 * sp[28];
    sp[313] = w1_d1_c2 * sp[33];
    sp[314] = sp[312] + sp[313];
    sp[315] = w1_d2_c2 * sp[39];
    sp[316] = sp[314] + sp[315];
    sp[317] = sp[93] + sp[316];
    sp[318] = w1_d0_c2 * sp[47];
    sp[319] = w1_d1_c2 * sp[52];
    sp[320] = sp[318] + sp[319];
    sp[321] = w1_d2_c2 * sp[58];
    sp[322] = sp[320] + sp[321];
    sp[323] = sp[100] + sp[322];
    sp[324] = 0.5 * sp[275] + 0.5 * sp[299];
    sp[325] = sp[324] + 0.5 * sp[323];
    sp[326] = sp[325] * w[6][0];
    sp[327] = sp[326] * sp[14];
    sp[328] = sp[326] * sp[18];
    sp[329] = sp[326] * sp[21];
    sp[330] = sp[326] * sp[28];
    sp[331] = sp[326] * sp[33];
    sp[332] = sp[326] * sp[39];
    sp[333] = sp[326] * sp[47];
    sp[334] = sp[326] * sp[52];
    sp[335] = sp[326] * sp[58];
    sp[336] = w[2][0] * (0.5 * sp[275]);
    sp[337] = w[2][1] * (0.5 * sp[281]);
    sp[338] = sp[336] + sp[337];
    sp[339] = w[2][2] * (0.5 * sp[287]);
    sp[340] = sp[338] + sp[339];
    sp[341] = sp[340] * sp[198];
    sp[342] = sp[340] * sp[199];
    sp[343] = sp[340] * sp[200];
    sp[344] = w[2][0] * (0.5 * sp[293]);
    sp[345] = w[2][1] * (0.5 * sp[299]);
    sp[346] = sp[344] + sp[345];
    sp[347] = w[2][2] * (0.5 * sp[305]);
    sp[348] = sp[346] + sp[347];
    sp[349] = sp[348] * sp[198];
    sp[350] = sp[348] * sp[199];
    sp[351] = sp[348] * sp[200];
    sp[352] = w[2][0] * (0.5 * sp[311]);
    sp[353] = w[2][1] * (0.5 * sp[317]);
    sp[354] = sp[352] + sp[353];
    sp[355] = w[2][2] * (0.5 * sp[323]);
    sp[356] = sp[354] + sp[355];
    sp[357] = sp[356] * sp[198];
    sp[358] = sp[356] * sp[199];
    sp[359] = sp[356] * sp[200];
    sp[360] = sp[341] * (-1 * w[5][0]);
    sp[361] = sp[342] * (-1 * w[5][0]);
    sp[362] = sp[343] * (-1 * w[5][0]);
    sp[363] = sp[349] * (-1 * w[5][0]);
    sp[364] = sp[350] * (-1 * w[5][0]);
    sp[365] = sp[351] * (-1 * w[5][0]);
    sp[366] = sp[357] * (-1 * w[5][0]);
    sp[367] = sp[358] * (-1 * w[5][0]);
    sp[368] = sp[359] * (-1 * w[5][0]);
    sp[369] = std::abs(sp[13]);
    alignas(32) double BF0[2] = {};
    alignas(32) double BF1[4] = {};
    alignas(32) double BF2[2] = {};
    alignas(32) double BF3[2] = {};
    alignas(32) double BF4[2] = {};
    alignas(32) double BF5[4] = {};
    alignas(32) double BF6[2] = {};
    alignas(32) double BF7[2] = {};
    alignas(32) double BF8[2] = {};
    alignas(32) double BF9[4] = {};
    alignas(32) double BF10[2] = {};
    alignas(32) double BF11[2] = {};
    for (int iq = 0; iq < 4; ++iq)
    {
        // Quadrature loop body setup (num_points=4)
        // Unstructured varying computations for num_points=4
        double w0_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c0 += w[0][ic] * FE44_C0_Q4[0][iq][ic];
        double w0_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c1 += w[0][ic + 4] * FE44_C0_Q4[0][iq][ic];
        double w0_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w0_c2 += w[0][ic + 8] * FE44_C0_Q4[0][iq][ic];
        double w1_c0 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c0 += w[1][ic] * FE44_C0_Q4[0][iq][ic];
        double w1_c1 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c1 += w[1][ic + 4] * FE44_C0_Q4[0][iq][ic];
        double w1_c2 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w1_c2 += w[1][ic + 8] * FE44_C0_Q4[0][iq][ic];
        double w3 = 0.0;
        for (int ic = 0; ic < 4; ++ic)
            w3 += w[3][ic] * FE44_C0_Q4[0][iq][ic];
        alignas(32) double sv4[105];
        sv4[0] = -1 * w0_c0 + sp[228];
        sv4[1] = -1 * w0_c1 + sp[229];
        sv4[2] = -1 * w0_c2 + sp[230];
        sv4[3] = w1_c0 + -1 * w0_c0;
        sv4[4] = w1_c1 + -1 * w0_c1;
        sv4[5] = w1_c2 + -1 * w0_c2;
        sv4[6] = -1 * sp[240] + w3;
        sv4[7] = sv4[6] * sp[14];
        sv4[8] = sv4[6] * sp[18];
        sv4[9] = sv4[6] * sp[21];
        sv4[10] = -1 * sp[249] + w3;
        sv4[11] = sv4[10] * sp[28];
        sv4[12] = sv4[10] * sp[33];
        sv4[13] = sv4[10] * sp[39];
        sv4[14] = sp[251] + sv4[7];
        sv4[15] = sp[252] + sv4[8];
        sv4[16] = sv4[9] + sp[253];
        sv4[17] = sv4[11] + sp[242];
        sv4[18] = sv4[12] + sp[243];
        sv4[19] = sp[244] + sv4[13];
        sv4[20] = -1 * sp[269] + w3;
        sv4[21] = sv4[20] * sp[47];
        sv4[22] = sv4[20] * sp[52];
        sv4[23] = sv4[20] * sp[58];
        sv4[24] = sv4[14] + sp[262];
        sv4[25] = sv4[15] + sp[263];
        sv4[26] = sv4[16] + sp[264];
        sv4[27] = sv4[17] + sp[266];
        sv4[28] = sv4[18] + sp[267];
        sv4[29] = sv4[19] + sp[268];
        sv4[30] = sp[258] + sv4[21];
        sv4[31] = sp[259] + sv4[22];
        sv4[32] = sp[260] + sv4[23];
        sv4[33] = w0_c0 * (0.5 * sp[275]);
        sv4[34] = w0_c1 * (0.5 * sp[281]);
        sv4[35] = sv4[33] + sv4[34];
        sv4[36] = w0_c2 * (0.5 * sp[287]);
        sv4[37] = sv4[35] + sv4[36];
        sv4[38] = w0_c0 * (0.5 * sp[293]);
        sv4[39] = w0_c1 * (0.5 * sp[299]);
        sv4[40] = sv4[38] + sv4[39];
        sv4[41] = w0_c2 * (0.5 * sp[305]);
        sv4[42] = sv4[40] + sv4[41];
        sv4[43] = w0_c0 * (0.5 * sp[311]);
        sv4[44] = w0_c1 * (0.5 * sp[317]);
        sv4[45] = sv4[43] + sv4[44];
        sv4[46] = w0_c2 * (0.5 * sp[323]);
        sv4[47] = sv4[45] + sv4[46];
        sv4[48] = sv4[24] + -1 * sp[327];
        sv4[49] = sv4[25] + -1 * sp[328];
        sv4[50] = sv4[26] + -1 * sp[329];
        sv4[51] = sv4[27] + -1 * sp[330];
        sv4[52] = sv4[28] + -1 * sp[331];
        sv4[53] = sv4[29] + -1 * sp[332];
        sv4[54] = sv4[30] + -1 * sp[333];
        sv4[55] = sv4[31] + -1 * sp[334];
        sv4[56] = sv4[32] + -1 * sp[335];
        sv4[57] = sv4[48] + sp[360];
        sv4[58] = sv4[49] + sp[361];
        sv4[59] = sv4[50] + sp[362];
        sv4[60] = sv4[51] + sp[363];
        sv4[61] = sv4[52] + sp[364];
        sv4[62] = sv4[53] + sp[365];
        sv4[63] = sv4[54] + sp[366];
        sv4[64] = sv4[55] + sp[367];
        sv4[65] = sv4[56] + sp[368];
        sv4[66] = -1 * sv4[37] * w[7][0];
        sv4[67] = -1 * sv4[42] * w[7][0];
        sv4[68] = -1 * sv4[47] * w[7][0];
        sv4[69] = sv4[57] * w[7][0];
        sv4[70] = sv4[58] * w[7][0];
        sv4[71] = sv4[59] * w[7][0];
        sv4[72] = sv4[60] * w[7][0];
        sv4[73] = sv4[61] * w[7][0];
        sv4[74] = sv4[62] * w[7][0];
        sv4[75] = sv4[63] * w[7][0];
        sv4[76] = sv4[64] * w[7][0];
        sv4[77] = sv4[65] * w[7][0];
        sv4[78] = sv4[3] + sv4[66];
        sv4[79] = sv4[4] + sv4[67];
        sv4[80] = sv4[5] + sv4[68];
        sv4[81] = sv4[0] + -1 * sv4[78];
        sv4[82] = sv4[1] + -1 * sv4[79];
        sv4[83] = sv4[2] + -1 * sv4[80];
        sv4[84] = -1 * sv4[69] + sp[231];
        sv4[85] = -1 * sv4[70] + sp[232];
        sv4[86] = -1 * sv4[71] + sp[233];
        sv4[87] = -1 * sv4[72] + sp[234];
        sv4[88] = -1 * sv4[73] + sp[235];
        sv4[89] = -1 * sv4[74] + sp[236];
        sv4[90] = -1 * sv4[75] + sp[237];
        sv4[91] = -1 * sv4[76] + sp[238];
        sv4[92] = -1 * sv4[77] + sp[239];
        sv4[93] = sv4[81] * sp[369];
        sv4[94] = sv4[82] * sp[369];
        sv4[95] = sv4[83] * sp[369];
        sv4[96] = sv4[84] * sp[369];
        sv4[97] = sv4[85] * sp[369];
        sv4[98] = sv4[86] * sp[369];
        sv4[99] = sv4[87] * sp[369];
        sv4[100] = sv4[88] * sp[369];
        sv4[101] = sv4[89] * sp[369];
        sv4[102] = sv4[90] * sp[369];
        sv4[103] = sv4[91] * sp[369];
        sv4[104] = sv4[92] * sp[369];
        const double fw0 = sv4[96] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF0[i] += fw0 * FE44_C0_D001_Q4[0][0][i];
        const double fw1 = sv4[93] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF1[i] += fw1 * FE44_C0_Q4[0][iq][i];
        const double fw2 = sv4[97] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF2[i] += fw2 * FE44_C0_D001_Q4[0][0][i];
        const double fw3 = sv4[98] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF3[i] += fw3 * FE44_C0_D001_Q4[0][0][i];
        const double fw4 = sv4[99] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF4[i] += fw4 * FE44_C0_D001_Q4[0][0][i];
        const double fw5 = sv4[94] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF5[i] += fw5 * FE44_C0_Q4[0][iq][i];
        const double fw6 = sv4[100] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF6[i] += fw6 * FE44_C0_D001_Q4[0][0][i];
        const double fw7 = sv4[101] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF7[i] += fw7 * FE44_C0_D001_Q4[0][0][i];
        const double fw8 = sv4[102] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF8[i] += fw8 * FE44_C0_D001_Q4[0][0][i];
        const double fw9 = sv4[95] * weights4[iq];
        for (int i = 0; i < 4; ++i)
            BF9[i] += fw9 * FE44_C0_Q4[0][iq][i];
        const double fw10 = sv4[103] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF10[i] += fw10 * FE44_C0_D001_Q4[0][0][i];
        const double fw11 = sv4[104] * weights4[iq];
        for (int i = 0; i < 2; ++i)
            BF11[i] += fw11 * FE44_C0_D001_Q4[0][0][i];
    }
    std::fill(A, A + 12, 0.0);
    static const int DM0[2] = { 0, 2 };
    static const int DM1[2] = { 0, 3 };
    static const int DM2[2] = { 4, 6 };
    static const int DM3[2] = { 4, 7 };
    static const int DM4[2] = { 8, 10 };
    static const int DM5[2] = { 8, 11 };
    for (int i = 0; i < 2; ++i)
        A[i] += BF0[i];
    for (int i = 0; i < 4; ++i)
        A[i] += BF1[i];
    for (int i = 0; i < 2; ++i)
        A[DM0[i]] += BF2[i];
    for (int i = 0; i < 2; ++i)
        A[DM1[i]] += BF3[i];
    for (int i = 0; i < 2; ++i)
        A[i + 4] += BF4[i];
    for (int i = 0; i < 4; ++i)
        A[i + 4] += BF5[i];
    for (int i = 0; i < 2; ++i)
        A[DM2[i]] += BF6[i];
    for (int i = 0; i < 2; ++i)
        A[DM3[i]] += BF7[i];
    for (int i = 0; i < 2; ++i)
        A[i + 8] += BF8[i];
    for (int i = 0; i < 4; ++i)
        A[i + 8] += BF9[i];
    for (int i = 0; i < 2; ++i)
        A[DM4[i]] += BF10[i];
    for (int i = 0; i < 2; ++i)
        A[DM5[i]] += BF11[i];
  }

};


class navierstokes3d_form_0: public ufc::form
{
public:

  navierstokes3d_form_0() : ufc::form()
  {
    // Do nothing
  }

  ~navierstokes3d_form_0() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "4b3a20a38a42d5c4f70ff353c86073be8808d72b5d03ae41e6671507d56549d31549f02f3f51a38044f281bfb044e501258ba78277c0b3f2a4b605edcee1564a";
  }

  std::size_t rank() const final override
  {
    return 2;
  }

  std::size_t num_coefficients() const final override
  {
    return 5;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 5)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes3d_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes3d_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new navierstokes3d_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_finite_element_1();
    case 1:
        return new navierstokes3d_finite_element_1();
    case 2:
        return new navierstokes3d_finite_element_3();
    case 3:
        return new navierstokes3d_finite_element_2();
    case 4:
        return new navierstokes3d_finite_element_2();
    case 5:
        return new navierstokes3d_finite_element_2();
    case 6:
        return new navierstokes3d_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_dofmap_1();
    case 1:
        return new navierstokes3d_dofmap_1();
    case 2:
        return new navierstokes3d_dofmap_3();
    case 3:
        return new navierstokes3d_dofmap_2();
    case 4:
        return new navierstokes3d_dofmap_2();
    case 5:
        return new navierstokes3d_dofmap_2();
    case 6:
        return new navierstokes3d_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new navierstokes3d_cell_integral_0_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};


class navierstokes3d_form_1: public ufc::form
{
public:

  navierstokes3d_form_1() : ufc::form()
  {
    // Do nothing
  }

  ~navierstokes3d_form_1() override
  {
    // Do nothing
  }

  const char * signature() const final override
  {
    return "d1f4eaf7fbb108b49177ee458fcb40e3d1bad7788fb490ec6d4fea4b2bc2087f4ace05b59866114a6dd3c16ee87808731a6277207933c21324b123b63191944c";
  }

  std::size_t rank() const final override
  {
    return 1;
  }

  std::size_t num_coefficients() const final override
  {
    return 8;
  }

  std::size_t original_coefficient_position(std::size_t i) const final override
  {
    if (i >= 8)
    {
        throw std::runtime_error("Invalid original coefficient index.");
    }
    static const std::vector<std::size_t> position = {0, 1, 2, 3, 4, 5, 6, 7};
    return position[i];
  }

  ufc::finite_element * create_coordinate_finite_element() const final override
  {
    return new navierstokes3d_finite_element_1();
  }

  ufc::dofmap * create_coordinate_dofmap() const final override
  {
    return new navierstokes3d_dofmap_1();
   }

  ufc::coordinate_mapping * create_coordinate_mapping() const final override
  {
    return new navierstokes3d_coordinate_mapping_1();
  }

  ufc::finite_element * create_finite_element(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_finite_element_1();
    case 1:
        return new navierstokes3d_finite_element_1();
    case 2:
        return new navierstokes3d_finite_element_1();
    case 3:
        return new navierstokes3d_finite_element_3();
    case 4:
        return new navierstokes3d_finite_element_0();
    case 5:
        return new navierstokes3d_finite_element_2();
    case 6:
        return new navierstokes3d_finite_element_2();
    case 7:
        return new navierstokes3d_finite_element_2();
    case 8:
        return new navierstokes3d_finite_element_2();
    default:
        return nullptr;
    }
  }

  ufc::dofmap * create_dofmap(std::size_t i) const final override
  {
    switch (i)
    {
    case 0:
        return new navierstokes3d_dofmap_1();
    case 1:
        return new navierstokes3d_dofmap_1();
    case 2:
        return new navierstokes3d_dofmap_1();
    case 3:
        return new navierstokes3d_dofmap_3();
    case 4:
        return new navierstokes3d_dofmap_0();
    case 5:
        return new navierstokes3d_dofmap_2();
    case 6:
        return new navierstokes3d_dofmap_2();
    case 7:
        return new navierstokes3d_dofmap_2();
    case 8:
        return new navierstokes3d_dofmap_2();
    default:
        return nullptr;
    }
  }

  std::size_t max_cell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_exterior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interior_facet_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_vertex_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_custom_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_cutcell_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_interface_subdomain_id() const final override
  {
    return 0;
  }

  std::size_t max_overlap_subdomain_id() const final override
  {
    return 0;
  }

  bool has_cell_integrals() const final override
  {
    return true;
  }

  bool has_exterior_facet_integrals() const final override
  {
    return false;
  }

  bool has_interior_facet_integrals() const final override
  {
    return false;
  }

  bool has_vertex_integrals() const final override
  {
    return false;
  }

  bool has_custom_integrals() const final override
  {
    return false;
  }

  bool has_cutcell_integrals() const final override
  {
    return false;
  }

  bool has_interface_integrals() const final override
  {
    return false;
  }

  bool has_overlap_integrals() const final override
  {
    return false;
  }

  ufc::cell_integral * create_cell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::exterior_facet_integral * create_exterior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_interior_facet_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_vertex_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_custom_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_cutcell_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_interface_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_overlap_integral(std::size_t subdomain_id) const final override
  {
    return nullptr;
  }

  ufc::cell_integral * create_default_cell_integral() const final override
  {
    return new navierstokes3d_cell_integral_1_otherwise();
  }

  ufc::exterior_facet_integral * create_default_exterior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::interior_facet_integral * create_default_interior_facet_integral() const final override
  {
    return nullptr;
  }

  ufc::vertex_integral * create_default_vertex_integral() const final override
  {
    return nullptr;
  }

  ufc::custom_integral * create_default_custom_integral() const final override
  {
    return nullptr;
  }

  ufc::cutcell_integral * create_default_cutcell_integral() const final override
  {
    return nullptr;
  }

  ufc::interface_integral * create_default_interface_integral() const final override
  {
    return nullptr;
  }

  ufc::overlap_integral * create_default_overlap_integral() const final override
  {
    return nullptr;
  }

};

/// Code generated with DOLFIN-HPC 0.9.3 wrappers.
// DOLFIN wrappers
#include <dolfin/fem/CoefficientMap.h>
#include <dolfin/fem/BilinearForm.h>
#include <dolfin/fem/LinearForm.h>
struct NavierStokes3D
{

class BilinearForm : public dolfin::BilinearForm
{
public:

  BilinearForm(dolfin::Mesh& mesh, dolfin::Coefficient& w0, dolfin::Coefficient& w1, dolfin::Coefficient& w2, dolfin::Coefficient& w3, dolfin::Coefficient& w4) : dolfin::BilinearForm(mesh)
  {
    coefficients_.push_back(&w0);
    coefficients_.push_back(&w1);
    coefficients_.push_back(&w2);
    coefficients_.push_back(&w3);
    coefficients_.push_back(&w4);
    Form::init(coefficients_);
  }

  BilinearForm(dolfin::Mesh& mesh, dolfin::CoefficientMap& map) : dolfin::BilinearForm(mesh)
  {
    Form::init(coefficients_, map);
  }

  /// Return UFC form
  ufc::form const& form() const
  {
    return form_;
  }

  /// Return vector of coefficients
  std::vector<dolfin::Coefficient*> const& coefficients() const
  {
    return coefficients_;
  }

  /// Return the name of the coefficient with this number
  std::string coefficient_name(dolfin::size_t const i) const
  {
    switch (i)
    {
    case 0:
      return "UPm";
    case 1:
      return "nu";
    case 2:
      return "d1";
    case 3:
      return "d2";
    case 4:
      return "k";
    }

    dolfin::error("Generated code for class Form: accessing coefficient data."
          "Invalid coefficient number %d", i);
    return "unnamed";
  }

private:

  // UFC form
  navierstokes3d_form_0 form_;

  /// vector of coefficients
  std::vector<dolfin::Coefficient*> coefficients_;

};


class LinearForm : public dolfin::LinearForm
{
public:

  LinearForm(dolfin::Mesh& mesh, dolfin::Coefficient& w0, dolfin::Coefficient& w1, dolfin::Coefficient& w2, dolfin::Coefficient& w3, dolfin::Coefficient& w4, dolfin::Coefficient& w5, dolfin::Coefficient& w6, dolfin::Coefficient& w7) : dolfin::LinearForm(mesh)
  {
    coefficients_.push_back(&w0);
    coefficients_.push_back(&w1);
    coefficients_.push_back(&w2);
    coefficients_.push_back(&w3);
    coefficients_.push_back(&w4);
    coefficients_.push_back(&w5);
    coefficients_.push_back(&w6);
    coefficients_.push_back(&w7);
    Form::init(coefficients_);
  }

  LinearForm(dolfin::Mesh& mesh, dolfin::CoefficientMap& map) : dolfin::LinearForm(mesh)
  {
    Form::init(coefficients_, map);
  }

  /// Return UFC form
  ufc::form const& form() const
  {
    return form_;
  }

  /// Return vector of coefficients
  std::vector<dolfin::Coefficient*> const& coefficients() const
  {
    return coefficients_;
  }

  /// Return the name of the coefficient with this number
  std::string coefficient_name(dolfin::size_t const i) const
  {
    switch (i)
    {
    case 0:
      return "UP";
    case 1:
      return "U0";
    case 2:
      return "UPm";
    case 3:
      return "P";
    case 4:
      return "nu";
    case 5:
      return "d1";
    case 6:
      return "d2";
    case 7:
      return "k";
    }

    dolfin::error("Generated code for class Form: accessing coefficient data."
          "Invalid coefficient number %d", i);
    return "unnamed";
  }

private:

  // UFC form
  navierstokes3d_form_1 form_;

  /// vector of coefficients
  std::vector<dolfin::Coefficient*> coefficients_;

};


};


#endif
