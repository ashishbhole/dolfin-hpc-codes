# The bilinear.ufl for classical linear elasticity (Navier).
# Compile this.ufl with FFC: ffc -l dolfin Elasticity.ufl.

dim=2
deg=1
cell= "triangle"
element = VectorElement("Lagrange", cell, degree=deg)
v = TestFunction(element)
u = TrialFunction(element)

u_0 = Coefficient(element)
f   = Coefficient(element)

constant = FiniteElement("Discontinuous Lagrange", cell, degree=0)
rho   = Coefficient(constant) 
mu    = Coefficient(constant) 
lmbda = Coefficient(constant) 
dt    = Coefficient(constant)

# Strain Matrix
def epsilon(v):
    return 0.5*(grad(v) + transpose(grad(v)))

# Elastic stiffness form
def sigma(v):
    return 2.0*(mu * epsilon(v)) + (lmbda * (tr(epsilon(v)) * Identity(len(v))))

a = rho*inner(u, v)*dx
L = - dt*dt*inner(sigma(u_0), sym(grad(v)))*dx + dt*dt*inner(f,  v)*dx
