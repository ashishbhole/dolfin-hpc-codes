# Copyright (c) 2005 Johan Jansson (johanjan@math.chalmers.se)
# Licensed under the GNU LGPL Version 2.1
#
# Modified by Anders Logg 2006-2007
# Modified by Garth N. Wells 2008
#
# First added:  2005
# Last changed: 2008-05-21
#
# The bilinear.ufl for classical linear elasticity (Navier).
# Compile this.ufl with FFC: ffc -l dolfin Elasticity.ufl.

deg = 1
element = VectorElement("Lagrange", "tetrahedron", degree=deg)

v = TestFunction(element)
u = TrialFunction(element)
un = Coefficient(element)
u_old = Coefficient(element)
f  = Coefficient(element)

dt = Constant("tetrahedron")
rho   = Constant("tetrahedron")
mu    = Constant("tetrahedron")
lmbda = Constant("tetrahedron")

def epsilon(v):
    return 0.5*(grad(v) + transpose(grad(v)))

def sigma(v):
    return 2*(mu* epsilon(v)) + (lmbda* (tr(epsilon(v))* Identity(len(v))))

res = rho*inner(v, u)*dx - 2*rho*inner(v, un)*dx + rho*inner(v, u_old)*dx + dt*dt*inner(grad(v), sigma(u))*dx - dt*dt*inner(v, f)*dx
a = lhs(res)
L = rhs(res)
