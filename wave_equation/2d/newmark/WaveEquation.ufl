# Copyright (C) 2023 Ashish Bhole.
# Licensed under the GNU LGPL Version 2.1.

deg = 1
V = FiniteElement("Lagrange", triangle, degree=deg)
# Test and trial functions
du = TrialFunction(V)
v  = TestFunction(V)
# Fields from previous time step (displacement, velocity, acceleration)
u_old = Coefficient(V)
v_old = Coefficient(V)
a_old = Coefficient(V)
f     = Coefficient(V)
constant = FiniteElement("Discontinuous Lagrange", triangle, 0)
c  = Coefficient(constant)
dt = Coefficient(constant)
beta = Coefficient(constant)
gamma= Coefficient(constant)

def m(u, v):
    return inner(u, v)*dx
def k(u, v):
    return c*c*inner(grad(u), grad(v))*dx
def avg(x_old, x_new, alpha):
    return alpha*x_old + (1-alpha)*x_new

# Update formula for acceleration
# a = 1/(2*beta)*((u - u0 - v0*dt)/(0.5*dt*dt) - (1-2*beta)*a0)
def update_a(u, u_old, v_old, a_old, ufl=True):
    if ufl:
        dt_ = dt
        beta_ = beta
    else:
        dt_ = float(dt)
        beta_ = float(beta)
    return (u-u_old-dt_*v_old)/beta_/dt_**2 - (1-2*beta_)/2/beta_*a_old

a_new = update_a(du, u_old, v_old, a_old, ufl=True)
res = m(avg(a_old, a_new, 2.0*beta), v) + k(avg(u_old, du, gamma), v) - v*f*dx
a = lhs(res)
L = rhs(res)
